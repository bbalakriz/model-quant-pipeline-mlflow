apiVersion: v1
items:
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.94/23"],"mac_address":"0a:58:0a:83:00:5e","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.94/23","gateway_ip":"10.131.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.94"
            ],
            "mac": "0a:58:0a:83:00:5e",
            "default": true,
            "dns": {}
        }]
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-07-21T07:16:18Z"
    generateName: mlflow-server-56c89dbd68-
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/name: mlflow-server
      pod-template-hash: 56c89dbd68
    name: mlflow-server-56c89dbd68-mw945
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mlflow-server-56c89dbd68
      uid: 23948b59-0d26-47f8-a621-89589c93a90b
    resourceVersion: "11493417"
    uid: a4b0e96e-25ce-42a4-b403-54425567b770
  spec:
    containers:
    - env:
      - name: AWS_ACCESS_KEY_ID
        valueFrom:
          secretKeyRef:
            key: AWS_ACCESS_KEY_ID
            name: mlflow-server
      - name: AWS_SECRET_ACCESS_KEY
        valueFrom:
          secretKeyRef:
            key: AWS_SECRET_ACCESS_KEY
            name: mlflow-server
      - name: MLFLOW_S3_BUCKET_NAME
        valueFrom:
          configMapKeyRef:
            key: BUCKET_NAME
            name: mlflow-server
      - name: BUCKET_HOST
        valueFrom:
          configMapKeyRef:
            key: BUCKET_HOST
            name: mlflow-server
      - name: BUCKET_PORT
        valueFrom:
          configMapKeyRef:
            key: BUCKET_PORT
            name: mlflow-server
      - name: MLFLOW_S3_ENDPOINT_URL
        value: https://$(BUCKET_HOST):$(BUCKET_PORT)
      - name: AWS_CA_BUNDLE
        value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
      - name: PGBOUNCE_HOST
        valueFrom:
          secretKeyRef:
            key: pgbouncer-host
            name: mlflow-server-pguser-mlflow-server
      - name: PGBOUNCE_PORT
        valueFrom:
          secretKeyRef:
            key: pgbouncer-port
            name: mlflow-server-pguser-mlflow-server
      - name: MLFLOW_DATABASE_HOST
        value: $(PGBOUNCE_HOST):$(PGBOUNCE_PORT)
      - name: MLFLOW_DATABASE_NAME
        valueFrom:
          secretKeyRef:
            key: dbname
            name: mlflow-server-pguser-mlflow-server
      - name: MLFLOW_DATABASE_PASSWORD
        valueFrom:
          secretKeyRef:
            key: password
            name: mlflow-server-pguser-mlflow-server
      - name: MLFLOW_DATABASE_USERNAME
        valueFrom:
          secretKeyRef:
            key: user
            name: mlflow-server-pguser-mlflow-server
      - name: MLFLOW_PORT
        value: "8080"
      - name: MLFLOW_S3_IGNORE_TLS
        value: "true"
      image: quay.io/troyer/mlflow-server:2.16
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /health
          port: mlflow-server
          scheme: HTTP
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: mlflow-server
      ports:
      - containerPort: 8080
        name: mlflow-server
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /health
          port: mlflow-server
          scheme: HTTP
        initialDelaySeconds: 30
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000930000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b2zqn
        readOnly: true
    - args:
      - --https-address=:8443
      - --provider=openshift
      - --openshift-sar={"namespace":"mlflow","resource":"services","resourceName":"mlflow-server","verb":"get"}
      - --openshift-service-account=mlflow-server
      - --upstream=http://localhost:8080
      - --tls-cert=/etc/tls/private/tls.crt
      - --tls-key=/etc/tls/private/tls.key
      - --cookie-secret=SECRET
      image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /oauth/healthz
          port: 8443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: oauth-proxy
      ports:
      - containerPort: 8443
        name: oauth-proxy
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /oauth/healthz
          port: 8443
          scheme: HTTPS
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        runAsNonRoot: true
        runAsUser: 1000930000
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/tls/private
        name: oauth-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b2zqn
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: mlflow-server-dockercfg-t2hjg
    nodeName: ip-10-0-46-117.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: mlflow-server
    serviceAccountName: mlflow-server
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: oauth-tls
      secret:
        defaultMode: 420
        secretName: mlflow-server-tls
    - name: kube-api-access-b2zqn
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-21T07:16:20Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-21T07:16:18Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-21T07:16:49Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-21T07:16:49Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-21T07:16:18Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://6a48566c093c0b6f68147045d41cdc6c07933fd1188c4d2d8c6cc5b755dfbfa0
      image: quay.io/troyer/mlflow-server:2.16
      imageID: quay.io/troyer/mlflow-server@sha256:53f06338e151d72db506b09dc038e9d98b027cf5a034f4a91a776aa8611c1865
      lastState: {}
      name: mlflow-server
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-21T07:16:19Z"
      volumeMounts:
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b2zqn
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://8447ad70b702a0f278a3eb573290d8acb6fbd47c1fd3d937c90be01779ad231b
      image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
      imageID: registry.redhat.io/openshift4/ose-oauth-proxy@sha256:db1909be8b01bdebc4b02380729a497e3700d299607fa7d46f227a38dad41c32
      lastState: {}
      name: oauth-proxy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-21T07:16:19Z"
      volumeMounts:
      - mountPath: /etc/tls/private
        name: oauth-tls
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-b2zqn
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.46.117
    hostIPs:
    - ip: 10.0.46.117
    phase: Running
    podIP: 10.131.0.94
    podIPs:
    - ip: 10.131.0.94
    qosClass: BestEffort
    startTime: "2025-07-21T07:16:18Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.103/23"],"mac_address":"0a:58:0a:81:02:67","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"169.254.0.5/32","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.103/23","gateway_ip":"10.129.2.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.2.103"
            ],
            "mac": "0a:58:0a:81:02:67",
            "default": true,
            "dns": {}
        }]
      kubectl.kubernetes.io/default-container: pgbackrest
      openshift.io/scc: restricted-v2
      postgres-operator.crunchydata.com/pgbackrest-hash: 65bb57b6b5
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-07-17T18:15:43Z"
    generateName: mlflow-server-backup-66bt-
    labels:
      batch.kubernetes.io/controller-uid: 3eff16ff-11b9-478e-8045-7a976a362b64
      batch.kubernetes.io/job-name: mlflow-server-backup-66bt
      controller-uid: 3eff16ff-11b9-478e-8045-7a976a362b64
      job-name: mlflow-server-backup-66bt
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/pgbackrest: ""
      postgres-operator.crunchydata.com/pgbackrest-backup: replica-create
      postgres-operator.crunchydata.com/pgbackrest-repo: repo1
    name: mlflow-server-backup-66bt-54k87
    namespace: mlflow
    ownerReferences:
    - apiVersion: batch/v1
      blockOwnerDeletion: true
      controller: true
      kind: Job
      name: mlflow-server-backup-66bt
      uid: 3eff16ff-11b9-478e-8045-7a976a362b64
    resourceVersion: "4757302"
    uid: eb555e66-33f8-4b6f-9015-18637924c612
  spec:
    containers:
    - command:
      - /opt/crunchy/bin/pgbackrest
      env:
      - name: COMMAND
        value: backup
      - name: COMMAND_OPTS
        value: --stanza=db --repo=1
      - name: COMPARE_HASH
        value: "true"
      - name: CONTAINER
        value: pgbackrest
      - name: NAMESPACE
        value: mlflow
      - name: SELECTOR
        value: postgres-operator.crunchydata.com/cluster=mlflow-server,postgres-operator.crunchydata.com/pgbackrest=,postgres-operator.crunchydata.com/pgbackrest-dedicated=
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: pgbackrest
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-44d8w
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    imagePullSecrets:
    - name: mlflow-server-pgbackrest-dockercfg-tnm84
    nodeName: ip-10-0-33-124.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Never
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: mlflow-server-pgbackrest
    serviceAccountName: mlflow-server-pgbackrest
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: pgbackrest-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: pgbackrest_repo.conf
              path: pgbackrest_repo.conf
            - key: config-hash
              path: config-hash
            - key: pgbackrest-server.conf
              path: ~postgres-operator_server.conf
            name: mlflow-server-pgbackrest-config
        - secret:
            items:
            - key: pgbackrest.ca-roots
              path: ~postgres-operator/tls-ca.crt
            - key: pgbackrest-client.crt
              path: ~postgres-operator/client-tls.crt
            - key: pgbackrest-client.key
              mode: 384
              path: ~postgres-operator/client-tls.key
            name: mlflow-server-pgbackrest
    - name: kube-api-access-44d8w
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:18:05Z"
      status: "False"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:43Z"
      reason: PodCompleted
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:18:03Z"
      reason: PodCompleted
      status: "False"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:18:03Z"
      reason: PodCompleted
      status: "False"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:43Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://45e56861091e977c9652e797ebb7267610e7eb5aa08770879d1f4a5652adc313
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest
      ready: false
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://45e56861091e977c9652e797ebb7267610e7eb5aa08770879d1f4a5652adc313
          exitCode: 0
          finishedAt: "2025-07-17T18:18:02Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:44Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-44d8w
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.33.124
    hostIPs:
    - ip: 10.0.33.124
    phase: Succeeded
    podIP: 10.129.2.103
    podIPs:
    - ip: 10.129.2.103
    qosClass: BestEffort
    startTime: "2025-07-17T18:15:43Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.128.3.141/23"],"mac_address":"0a:58:0a:80:03:8d","gateway_ips":["10.128.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.128.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.128.2.1"},{"dest":"169.254.0.5/32","nextHop":"10.128.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.128.2.1"}],"ip_address":"10.128.3.141/23","gateway_ip":"10.128.2.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.128.3.141"
            ],
            "mac": "0a:58:0a:80:03:8d",
            "default": true,
            "dns": {}
        }]
      kubectl.kubernetes.io/default-container: database
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
      status: '{"conn_url":"postgres://mlflow-server-instance1-rd4g-0.mlflow-server-pods:5432/postgres","api_url":"https://mlflow-server-instance1-rd4g-0.mlflow-server-pods:8008/patroni","state":"running","role":"primary","version":"4.0.4","xlog_location":788529152,"timeline":1}'
    creationTimestamp: "2025-07-17T18:15:05Z"
    generateName: mlflow-server-instance1-rd4g-
    labels:
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: mlflow-server-instance1-rd4g-776d966789
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: postgres
      postgres-operator.crunchydata.com/instance: mlflow-server-instance1-rd4g
      postgres-operator.crunchydata.com/instance-set: instance1
      postgres-operator.crunchydata.com/patroni: mlflow-server-ha
      postgres-operator.crunchydata.com/role: master
      statefulset.kubernetes.io/pod-name: mlflow-server-instance1-rd4g-0
    name: mlflow-server-instance1-rd4g-0
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: mlflow-server-instance1-rd4g
      uid: 729ae696-0a32-4f05-9f4a-9d1eb5fdfd65
    resourceVersion: "13742591"
    uid: cc5fb2b3-021b-4c7c-9d1c-fa0caa6e2158
  spec:
    containers:
    - command:
      - patroni
      - /etc/patroni
      env:
      - name: PGDATA
        value: /pgdata/pg16
      - name: PGHOST
        value: /tmp/postgres
      - name: PGPORT
        value: "5432"
      - name: KRB5_CONFIG
        value: /etc/postgres/krb5.conf
      - name: KRB5RCACHEDIR
        value: /tmp
      - name: LDAPTLS_CACERT
        value: /etc/postgres/ldap/ca.crt
      - name: PATRONI_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: PATRONI_KUBERNETES_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: PATRONI_KUBERNETES_PORTS
        value: |
          - name: postgres
            port: 5432
            protocol: TCP
      - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
        value: $(PATRONI_NAME).mlflow-server-pods:5432
      - name: PATRONI_POSTGRESQL_LISTEN
        value: '*:5432'
      - name: PATRONI_POSTGRESQL_CONFIG_DIR
        value: /pgdata/pg16
      - name: PATRONI_POSTGRESQL_DATA_DIR
        value: /pgdata/pg16
      - name: PATRONI_RESTAPI_CONNECT_ADDRESS
        value: $(PATRONI_NAME).mlflow-server-pods:8008
      - name: PATRONI_RESTAPI_LISTEN
        value: '*:8008'
      - name: PATRONICTL_CONFIG_FILE
        value: /etc/patroni
      - name: LD_PRELOAD
        value: /usr/lib64/libnss_wrapper.so
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/nss_wrapper/postgres/passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/nss_wrapper/postgres/group
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /liveness
          port: 8008
          scheme: HTTPS
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: database
      ports:
      - containerPort: 5432
        name: postgres
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8008
          scheme: HTTPS
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/database-containerinfo
        name: database-containerinfo
        readOnly: true
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /etc/patroni
        name: patroni-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        # Parameters for curl when managing autogrow annotation.
        APISERVER="https://kubernetes.default.svc"
        SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
        NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
        TOKEN=$(cat ${SERVICEACCOUNT}/token)
        CACERT=${SERVICEACCOUNT}/ca.crt

        declare -r directory="/pgconf/tls"
        exec {fd}<> <(:||:)
        while read -r -t 5 -u "${fd}" ||:; do
          # Manage replication certificate.
          if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] &&
            install -D --mode=0600 -t "/tmp/replication" "${directory}"/{replication/tls.crt,replication/tls.key,replication/ca.crt} &&
            pkill -HUP --exact --parent=1 postgres
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded certificates dated %y' "${directory}"
          fi

          # Manage autogrow annotation.
          # Return size in Mebibytes.
          size=$(df --human-readable --block-size=M /pgdata | awk 'FNR == 2 {print $2}')
          use=$(df --human-readable /pgdata | awk 'FNR == 2 {print $5}')
          sizeInt="${size//M/}"
          # Use the sed punctuation class, because the shell will not accept the percent sign in an expansion.
          useInt=$(echo $use | sed 's/[[:punct:]]//g')
          triggerExpansion="$((useInt > 75))"
          if [ $triggerExpansion -eq 1 ]; then
            newSize="$(((sizeInt / 2)+sizeInt))"
            newSizeMi="${newSize}Mi"
            d='[{"op": "add", "path": "/metadata/annotations/suggested-pgdata-pvc-size", "value": "'"$newSizeMi"'"}]'
            curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -XPATCH "${APISERVER}/api/v1/namespaces/${NAMESPACE}/pods/${HOSTNAME}?fieldManager=kubectl-annotate" -H "Content-Type: application/json-patch+json" --data "$d"
          fi
        done
        }; export -f monitor; exec -a "$0" bash -ceu monitor
      - replication-cert-copy
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: replication-cert-copy
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    - command:
      - pgbackrest
      - server
      env:
      - name: LD_PRELOAD
        value: /usr/lib64/libnss_wrapper.so
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/nss_wrapper/postgres/passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/nss_wrapper/postgres/group
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - pgbackrest
          - server-ping
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: pgbackrest
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        exec {fd}<> <(:||:)
        until read -r -t 5 -u "${fd}"; do
          if
            [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --dereference --format='Loaded configuration dated %y' "${filename}"
          elif
            { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
              [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
            } &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded certificates dated %y' "${directory}"
          fi
        done
        }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
      - pgbackrest-config
      - /etc/pgbackrest/server
      - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
      - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: pgbackrest-config
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    hostname: mlflow-server-instance1-rd4g-0
    imagePullSecrets:
    - name: mlflow-server-instance-dockercfg-7bw9x
    initContainers:
    - command:
      - bash
      - -ceu
      - --
      - |-
        declare -r expected_major_version="$1" pgwal_directory="$2"
        permissions() { while [[ -n "$1" ]]; do set "${1%/*}" "$@"; done; shift; stat -Lc '%A %4u %4g %n' "$@"; }
        halt() { local rc=$?; >&2 echo "$@"; exit "${rc/#0/1}"; }
        results() { printf '::postgres-operator: %s::%s\n' "$@"; }
        recreate() (
          local tmp; tmp=$(mktemp -d -p "${1%/*}"); GLOBIGNORE='.:..'; set -x
          chmod "$2" "${tmp}"; mv "$1"/* "${tmp}"; rmdir "$1"; mv "${tmp}" "$1"
        )
        safelink() (
          local desired="$1" name="$2" current
          current=$(realpath "${name}")
          if [[ "${current}" == "${desired}" ]]; then return; fi
          set -x; mv --no-target-directory "${current}" "${desired}"
          ln --no-dereference --force --symbolic "${desired}" "${name}"
        )
        echo Initializing ...
        results 'uid' "$(id -u ||:)" 'gid' "$(id -G ||:)"
        if [[ "${pgwal_directory}" == *"pgwal/"* ]] && [[ ! -d "/pgwal/pgbackrest-spool" ]];then rm -rf "/pgdata/pgbackrest-spool" && mkdir -p "/pgwal/pgbackrest-spool" && ln --force --symbolic "/pgwal/pgbackrest-spool" "/pgdata/pgbackrest-spool";fi
        if [[ ! -e "/pgdata/pgbackrest-spool" ]];then rm -rf /pgdata/pgbackrest-spool;fi
        results 'postgres path' "$(command -v postgres ||:)"
        results 'postgres version' "${postgres_version:=$(postgres --version ||:)}"
        [[ "${postgres_version}" =~ ") ${expected_major_version}"($|[^0-9]) ]] ||
        halt Expected PostgreSQL version "${expected_major_version}"
        results 'config directory' "${PGDATA:?}"
        postgres_data_directory=$([[ -d "${PGDATA}" ]] && postgres -C data_directory || echo "${PGDATA}")
        results 'data directory' "${postgres_data_directory}"
        [[ "${postgres_data_directory}" == "${PGDATA}" ]] ||
        halt Expected matching config and data directories
        bootstrap_dir="${postgres_data_directory}_bootstrap"
        [[ -d "${bootstrap_dir}" ]] && results 'bootstrap directory' "${bootstrap_dir}"
        [[ -d "${bootstrap_dir}" ]] && postgres_data_directory="${bootstrap_dir}"
        if [[ ! -e "${postgres_data_directory}" || -O "${postgres_data_directory}" ]]; then
        install --directory --mode=0700 "${postgres_data_directory}"
        elif [[ -w "${postgres_data_directory}" && -g "${postgres_data_directory}" ]]; then
        recreate "${postgres_data_directory}" '0700'
        else (halt Permissions!); fi ||
        halt "$(permissions "${postgres_data_directory}" ||:)"
        (mkdir -p '/pgdata/pgbackrest/log' && { chmod 0775 '/pgdata/pgbackrest/log' '/pgdata/pgbackrest' || :; }) ||
        halt "$(permissions /pgdata/pgbackrest/log ||:)"
        (mkdir -p '/pgdata/patroni/log' && { chmod 0775 '/pgdata/patroni/log' '/pgdata/patroni' || :; }) ||
        halt "$(permissions /pgdata/patroni/log ||:)"
        (mkdir -p '/pgdata/logs/postgres' && { chmod 0775 '/pgdata/logs/postgres' '/pgdata/logs' || :; }) ||
        halt "$(permissions /pgdata/logs/postgres ||:)"
        install -D --mode=0600 -t "/tmp/replication" "/pgconf/tls/replication"/{tls.crt,tls.key,ca.crt}


        [[ -f "${postgres_data_directory}/PG_VERSION" ]] || exit 0
        results 'data version' "${postgres_data_version:=$(< "${postgres_data_directory}/PG_VERSION")}"
        [[ "${postgres_data_version}" == "${expected_major_version}" ]] ||
        halt Expected PostgreSQL data version "${expected_major_version}"
        [[ ! -f "${postgres_data_directory}/postgresql.conf" ]] &&
        touch "${postgres_data_directory}/postgresql.conf"
        safelink "${pgwal_directory}" "${postgres_data_directory}/pg_wal"
        results 'wal directory' "$(realpath "${postgres_data_directory}/pg_wal" ||:)"
        rm -f "${postgres_data_directory}/recovery.signal"
      - startup
      - "16"
      - /pgdata/pg16_wal
      env:
      - name: PGDATA
        value: /pgdata/pg16
      - name: PGHOST
        value: /tmp/postgres
      - name: PGPORT
        value: "5432"
      - name: KRB5_CONFIG
        value: /etc/postgres/krb5.conf
      - name: KRB5RCACHEDIR
        value: /tmp
      - name: LDAPTLS_CACERT
        value: /etc/postgres/ldap/ca.crt
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: postgres-startup
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    - command:
      - bash
      - -c
      - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
        \n# Define nss_wrapper directory and passwd & group files that will be utilized
        by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also sets these vars)
        isn't sourced here since the nss_wrapper\n# has not yet been setup, and we
        therefore don't yet want the nss_wrapper vars in the environment.\nmkdir -p
        /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
        create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n# grab
        the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
        -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[ -f
        \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
        -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
        if the username is missing from the passwd file, then add it\nif [[ ! $(cat
        \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n
        \   echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
        \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
        with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
        \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
        >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
        \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
        if the username (which will be the same as the group name) is missing from
        group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
        ]]; then\n    echo \"nss_wrapper: adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n
        \   cp \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
        >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
        \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
        export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
        & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
        NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
        configured\"\n"
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: nss-wrapper-init
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
    nodeName: ip-10-0-16-215.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: mlflow-server-instance
    serviceAccountName: mlflow-server-instance
    shareProcessNamespace: true
    subdomain: mlflow-server-pods
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - name: cert-volume
      projected:
        defaultMode: 384
        sources:
        - secret:
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            name: mlflow-server-cluster-cert
        - secret:
            items:
            - key: tls.crt
              path: replication/tls.crt
            - key: tls.key
              path: replication/tls.key
            - key: ca.crt
              path: replication/ca.crt
            name: mlflow-server-replication-cert
    - name: postgres-data
      persistentVolumeClaim:
        claimName: mlflow-server-instance1-rd4g-pgdata
    - downwardAPI:
        defaultMode: 420
        items:
        - path: cpu_limit
          resourceFieldRef:
            containerName: database
            divisor: 1m
            resource: limits.cpu
        - path: cpu_request
          resourceFieldRef:
            containerName: database
            divisor: 1m
            resource: requests.cpu
        - path: mem_limit
          resourceFieldRef:
            containerName: database
            divisor: 1Mi
            resource: limits.memory
        - path: mem_request
          resourceFieldRef:
            containerName: database
            divisor: 1Mi
            resource: requests.memory
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: database-containerinfo
    - name: pgbackrest-server
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: pgbackrest-server.crt
              path: server-tls.crt
            - key: pgbackrest-server.key
              mode: 384
              path: server-tls.key
            name: mlflow-server-instance1-rd4g-certs
    - name: pgbackrest-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: pgbackrest_instance.conf
              path: pgbackrest_instance.conf
            - key: config-hash
              path: config-hash
            - key: pgbackrest-server.conf
              path: ~postgres-operator_server.conf
            name: mlflow-server-pgbackrest-config
        - secret:
            items:
            - key: pgbackrest.ca-roots
              path: ~postgres-operator/tls-ca.crt
            - key: pgbackrest-client.crt
              path: ~postgres-operator/client-tls.crt
            - key: pgbackrest-client.key
              mode: 384
              path: ~postgres-operator/client-tls.key
            name: mlflow-server-pgbackrest
    - name: patroni-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: patroni.yaml
              path: ~postgres-operator_cluster.yaml
            name: mlflow-server-config
        - configMap:
            items:
            - key: patroni.yaml
              path: ~postgres-operator_instance.yaml
            name: mlflow-server-instance1-rd4g-config
        - secret:
            items:
            - key: patroni.ca-roots
              path: ~postgres-operator/patroni.ca-roots
            - key: patroni.crt-combined
              path: ~postgres-operator/patroni.crt+key
            name: mlflow-server-instance1-rd4g-certs
    - emptyDir:
        sizeLimit: 16Mi
      name: tmp
    - emptyDir:
        medium: Memory
      name: dshm
    - name: kube-api-access-nf4nb
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:38Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:39Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:48Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:48Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://a97c1248fade3cf59005dd5d2ef3e1b3d61ae88814e233bdccbd06c819108927
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: database
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:39Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/database-containerinfo
        name: database-containerinfo
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/patroni
        name: patroni-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://9660a2b301336c8e59097e1d74523fa12979cd45862fecf359d9b17ef8bb8a38
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:47Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://197f9b300fe1757391bed746c1eac912ec7d2d373f1ca50615c852ff7995e16b
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest-config
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:47Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://77d3b00bfa063c03fcbf350f38e6c6dfd9cdedecb4b184de949945ef6867bc90
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: replication-cert-copy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:39Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.16.215
    hostIPs:
    - ip: 10.0.16.215
    initContainerStatuses:
    - containerID: cri-o://1effe3c299b2a1b44f33bca6e89382ccd0759c9295258712387a88298f4eb53e
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: postgres-startup
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://1effe3c299b2a1b44f33bca6e89382ccd0759c9295258712387a88298f4eb53e
          exitCode: 0
          finishedAt: "2025-07-17T18:15:37Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:37Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://3a7295153ac87749466d6825109a61ac2b9c71d63dfc019630fc48295f5cb726
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: nss-wrapper-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://3a7295153ac87749466d6825109a61ac2b9c71d63dfc019630fc48295f5cb726
          exitCode: 0
          finishedAt: "2025-07-17T18:15:38Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:38Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-nf4nb
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.128.3.141
    podIPs:
    - ip: 10.128.3.141
    qosClass: BestEffort
    startTime: "2025-07-17T18:15:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.89/23"],"mac_address":"0a:58:0a:83:00:59","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.89/23","gateway_ip":"10.131.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.89"
            ],
            "mac": "0a:58:0a:83:00:59",
            "default": true,
            "dns": {}
        }]
      kubectl.kubernetes.io/default-container: database
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
      status: '{"conn_url":"postgres://mlflow-server-instance1-vj2j-0.mlflow-server-pods:5432/postgres","api_url":"https://mlflow-server-instance1-vj2j-0.mlflow-server-pods:8008/patroni","state":"running","role":"replica","version":"4.0.4","xlog_location":788529152,"replication_state":"streaming","timeline":1}'
    creationTimestamp: "2025-07-17T18:15:05Z"
    generateName: mlflow-server-instance1-vj2j-
    labels:
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: mlflow-server-instance1-vj2j-7788d664bd
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: postgres
      postgres-operator.crunchydata.com/instance: mlflow-server-instance1-vj2j
      postgres-operator.crunchydata.com/instance-set: instance1
      postgres-operator.crunchydata.com/patroni: mlflow-server-ha
      postgres-operator.crunchydata.com/role: replica
      statefulset.kubernetes.io/pod-name: mlflow-server-instance1-vj2j-0
    name: mlflow-server-instance1-vj2j-0
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: mlflow-server-instance1-vj2j
      uid: 472b434f-3fcb-4223-acda-aa7ae4be970e
    resourceVersion: "13742593"
    uid: 5c1e5461-a766-4838-9d59-0e6a096879f1
  spec:
    containers:
    - command:
      - patroni
      - /etc/patroni
      env:
      - name: PGDATA
        value: /pgdata/pg16
      - name: PGHOST
        value: /tmp/postgres
      - name: PGPORT
        value: "5432"
      - name: KRB5_CONFIG
        value: /etc/postgres/krb5.conf
      - name: KRB5RCACHEDIR
        value: /tmp
      - name: LDAPTLS_CACERT
        value: /etc/postgres/ldap/ca.crt
      - name: PATRONI_NAME
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.name
      - name: PATRONI_KUBERNETES_POD_IP
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: status.podIP
      - name: PATRONI_KUBERNETES_PORTS
        value: |
          - name: postgres
            port: 5432
            protocol: TCP
      - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
        value: $(PATRONI_NAME).mlflow-server-pods:5432
      - name: PATRONI_POSTGRESQL_LISTEN
        value: '*:5432'
      - name: PATRONI_POSTGRESQL_CONFIG_DIR
        value: /pgdata/pg16
      - name: PATRONI_POSTGRESQL_DATA_DIR
        value: /pgdata/pg16
      - name: PATRONI_RESTAPI_CONNECT_ADDRESS
        value: $(PATRONI_NAME).mlflow-server-pods:8008
      - name: PATRONI_RESTAPI_LISTEN
        value: '*:8008'
      - name: PATRONICTL_CONFIG_FILE
        value: /etc/patroni
      - name: LD_PRELOAD
        value: /usr/lib64/libnss_wrapper.so
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/nss_wrapper/postgres/passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/nss_wrapper/postgres/group
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /liveness
          port: 8008
          scheme: HTTPS
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      name: database
      ports:
      - containerPort: 5432
        name: postgres
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /readiness
          port: 8008
          scheme: HTTPS
        initialDelaySeconds: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 5
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/database-containerinfo
        name: database-containerinfo
        readOnly: true
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /etc/patroni
        name: patroni-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        # Parameters for curl when managing autogrow annotation.
        APISERVER="https://kubernetes.default.svc"
        SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
        NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
        TOKEN=$(cat ${SERVICEACCOUNT}/token)
        CACERT=${SERVICEACCOUNT}/ca.crt

        declare -r directory="/pgconf/tls"
        exec {fd}<> <(:||:)
        while read -r -t 5 -u "${fd}" ||:; do
          # Manage replication certificate.
          if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] &&
            install -D --mode=0600 -t "/tmp/replication" "${directory}"/{replication/tls.crt,replication/tls.key,replication/ca.crt} &&
            pkill -HUP --exact --parent=1 postgres
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded certificates dated %y' "${directory}"
          fi

          # Manage autogrow annotation.
          # Return size in Mebibytes.
          size=$(df --human-readable --block-size=M /pgdata | awk 'FNR == 2 {print $2}')
          use=$(df --human-readable /pgdata | awk 'FNR == 2 {print $5}')
          sizeInt="${size//M/}"
          # Use the sed punctuation class, because the shell will not accept the percent sign in an expansion.
          useInt=$(echo $use | sed 's/[[:punct:]]//g')
          triggerExpansion="$((useInt > 75))"
          if [ $triggerExpansion -eq 1 ]; then
            newSize="$(((sizeInt / 2)+sizeInt))"
            newSizeMi="${newSize}Mi"
            d='[{"op": "add", "path": "/metadata/annotations/suggested-pgdata-pvc-size", "value": "'"$newSizeMi"'"}]'
            curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -XPATCH "${APISERVER}/api/v1/namespaces/${NAMESPACE}/pods/${HOSTNAME}?fieldManager=kubectl-annotate" -H "Content-Type: application/json-patch+json" --data "$d"
          fi
        done
        }; export -f monitor; exec -a "$0" bash -ceu monitor
      - replication-cert-copy
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: replication-cert-copy
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    - command:
      - pgbackrest
      - server
      env:
      - name: LD_PRELOAD
        value: /usr/lib64/libnss_wrapper.so
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/nss_wrapper/postgres/passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/nss_wrapper/postgres/group
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - pgbackrest
          - server-ping
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: pgbackrest
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        exec {fd}<> <(:||:)
        until read -r -t 5 -u "${fd}"; do
          if
            [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --dereference --format='Loaded configuration dated %y' "${filename}"
          elif
            { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
              [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
            } &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded certificates dated %y' "${directory}"
          fi
        done
        }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
      - pgbackrest-config
      - /etc/pgbackrest/server
      - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
      - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: pgbackrest-config
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    hostname: mlflow-server-instance1-vj2j-0
    imagePullSecrets:
    - name: mlflow-server-instance-dockercfg-7bw9x
    initContainers:
    - command:
      - bash
      - -ceu
      - --
      - |-
        declare -r expected_major_version="$1" pgwal_directory="$2"
        permissions() { while [[ -n "$1" ]]; do set "${1%/*}" "$@"; done; shift; stat -Lc '%A %4u %4g %n' "$@"; }
        halt() { local rc=$?; >&2 echo "$@"; exit "${rc/#0/1}"; }
        results() { printf '::postgres-operator: %s::%s\n' "$@"; }
        recreate() (
          local tmp; tmp=$(mktemp -d -p "${1%/*}"); GLOBIGNORE='.:..'; set -x
          chmod "$2" "${tmp}"; mv "$1"/* "${tmp}"; rmdir "$1"; mv "${tmp}" "$1"
        )
        safelink() (
          local desired="$1" name="$2" current
          current=$(realpath "${name}")
          if [[ "${current}" == "${desired}" ]]; then return; fi
          set -x; mv --no-target-directory "${current}" "${desired}"
          ln --no-dereference --force --symbolic "${desired}" "${name}"
        )
        echo Initializing ...
        results 'uid' "$(id -u ||:)" 'gid' "$(id -G ||:)"
        if [[ "${pgwal_directory}" == *"pgwal/"* ]] && [[ ! -d "/pgwal/pgbackrest-spool" ]];then rm -rf "/pgdata/pgbackrest-spool" && mkdir -p "/pgwal/pgbackrest-spool" && ln --force --symbolic "/pgwal/pgbackrest-spool" "/pgdata/pgbackrest-spool";fi
        if [[ ! -e "/pgdata/pgbackrest-spool" ]];then rm -rf /pgdata/pgbackrest-spool;fi
        results 'postgres path' "$(command -v postgres ||:)"
        results 'postgres version' "${postgres_version:=$(postgres --version ||:)}"
        [[ "${postgres_version}" =~ ") ${expected_major_version}"($|[^0-9]) ]] ||
        halt Expected PostgreSQL version "${expected_major_version}"
        results 'config directory' "${PGDATA:?}"
        postgres_data_directory=$([[ -d "${PGDATA}" ]] && postgres -C data_directory || echo "${PGDATA}")
        results 'data directory' "${postgres_data_directory}"
        [[ "${postgres_data_directory}" == "${PGDATA}" ]] ||
        halt Expected matching config and data directories
        bootstrap_dir="${postgres_data_directory}_bootstrap"
        [[ -d "${bootstrap_dir}" ]] && results 'bootstrap directory' "${bootstrap_dir}"
        [[ -d "${bootstrap_dir}" ]] && postgres_data_directory="${bootstrap_dir}"
        if [[ ! -e "${postgres_data_directory}" || -O "${postgres_data_directory}" ]]; then
        install --directory --mode=0700 "${postgres_data_directory}"
        elif [[ -w "${postgres_data_directory}" && -g "${postgres_data_directory}" ]]; then
        recreate "${postgres_data_directory}" '0700'
        else (halt Permissions!); fi ||
        halt "$(permissions "${postgres_data_directory}" ||:)"
        (mkdir -p '/pgdata/pgbackrest/log' && { chmod 0775 '/pgdata/pgbackrest/log' '/pgdata/pgbackrest' || :; }) ||
        halt "$(permissions /pgdata/pgbackrest/log ||:)"
        (mkdir -p '/pgdata/patroni/log' && { chmod 0775 '/pgdata/patroni/log' '/pgdata/patroni' || :; }) ||
        halt "$(permissions /pgdata/patroni/log ||:)"
        (mkdir -p '/pgdata/logs/postgres' && { chmod 0775 '/pgdata/logs/postgres' '/pgdata/logs' || :; }) ||
        halt "$(permissions /pgdata/logs/postgres ||:)"
        install -D --mode=0600 -t "/tmp/replication" "/pgconf/tls/replication"/{tls.crt,tls.key,ca.crt}


        [[ -f "${postgres_data_directory}/PG_VERSION" ]] || exit 0
        results 'data version' "${postgres_data_version:=$(< "${postgres_data_directory}/PG_VERSION")}"
        [[ "${postgres_data_version}" == "${expected_major_version}" ]] ||
        halt Expected PostgreSQL data version "${expected_major_version}"
        [[ ! -f "${postgres_data_directory}/postgresql.conf" ]] &&
        touch "${postgres_data_directory}/postgresql.conf"
        safelink "${pgwal_directory}" "${postgres_data_directory}/pg_wal"
        results 'wal directory' "$(realpath "${postgres_data_directory}/pg_wal" ||:)"
        rm -f "${postgres_data_directory}/recovery.signal"
      - startup
      - "16"
      - /pgdata/pg16_wal
      env:
      - name: PGDATA
        value: /pgdata/pg16
      - name: PGHOST
        value: /tmp/postgres
      - name: PGPORT
        value: "5432"
      - name: KRB5_CONFIG
        value: /etc/postgres/krb5.conf
      - name: KRB5RCACHEDIR
        value: /tmp
      - name: LDAPTLS_CACERT
        value: /etc/postgres/ldap/ca.crt
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: postgres-startup
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    - command:
      - bash
      - -c
      - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
        \n# Define nss_wrapper directory and passwd & group files that will be utilized
        by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also sets these vars)
        isn't sourced here since the nss_wrapper\n# has not yet been setup, and we
        therefore don't yet want the nss_wrapper vars in the environment.\nmkdir -p
        /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
        create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n# grab
        the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
        -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[ -f
        \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
        -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
        if the username is missing from the passwd file, then add it\nif [[ ! $(cat
        \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n
        \   echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
        \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
        with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
        \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
        >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
        \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
        if the username (which will be the same as the group name) is missing from
        group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
        ]]; then\n    echo \"nss_wrapper: adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n
        \   cp \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
        >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
        \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
        export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
        & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
        NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
        configured\"\n"
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imagePullPolicy: IfNotPresent
      name: nss-wrapper-init
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
    nodeName: ip-10-0-46-117.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: mlflow-server-instance
    serviceAccountName: mlflow-server-instance
    shareProcessNamespace: true
    subdomain: mlflow-server-pods
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - name: cert-volume
      projected:
        defaultMode: 384
        sources:
        - secret:
            items:
            - key: tls.crt
              path: tls.crt
            - key: tls.key
              path: tls.key
            - key: ca.crt
              path: ca.crt
            name: mlflow-server-cluster-cert
        - secret:
            items:
            - key: tls.crt
              path: replication/tls.crt
            - key: tls.key
              path: replication/tls.key
            - key: ca.crt
              path: replication/ca.crt
            name: mlflow-server-replication-cert
    - name: postgres-data
      persistentVolumeClaim:
        claimName: mlflow-server-instance1-vj2j-pgdata
    - downwardAPI:
        defaultMode: 420
        items:
        - path: cpu_limit
          resourceFieldRef:
            containerName: database
            divisor: 1m
            resource: limits.cpu
        - path: cpu_request
          resourceFieldRef:
            containerName: database
            divisor: 1m
            resource: requests.cpu
        - path: mem_limit
          resourceFieldRef:
            containerName: database
            divisor: 1Mi
            resource: limits.memory
        - path: mem_request
          resourceFieldRef:
            containerName: database
            divisor: 1Mi
            resource: requests.memory
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.labels
          path: labels
        - fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations
          path: annotations
      name: database-containerinfo
    - name: pgbackrest-server
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: pgbackrest-server.crt
              path: server-tls.crt
            - key: pgbackrest-server.key
              mode: 384
              path: server-tls.key
            name: mlflow-server-instance1-vj2j-certs
    - name: pgbackrest-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: pgbackrest_instance.conf
              path: pgbackrest_instance.conf
            - key: config-hash
              path: config-hash
            - key: pgbackrest-server.conf
              path: ~postgres-operator_server.conf
            name: mlflow-server-pgbackrest-config
        - secret:
            items:
            - key: pgbackrest.ca-roots
              path: ~postgres-operator/tls-ca.crt
            - key: pgbackrest-client.crt
              path: ~postgres-operator/client-tls.crt
            - key: pgbackrest-client.key
              mode: 384
              path: ~postgres-operator/client-tls.key
            name: mlflow-server-pgbackrest
    - name: patroni-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: patroni.yaml
              path: ~postgres-operator_cluster.yaml
            name: mlflow-server-config
        - configMap:
            items:
            - key: patroni.yaml
              path: ~postgres-operator_instance.yaml
            name: mlflow-server-instance1-vj2j-config
        - secret:
            items:
            - key: patroni.ca-roots
              path: ~postgres-operator/patroni.ca-roots
            - key: patroni.crt-combined
              path: ~postgres-operator/patroni.crt+key
            name: mlflow-server-instance1-vj2j-certs
    - emptyDir:
        sizeLimit: 16Mi
      name: tmp
    - emptyDir:
        medium: Memory
      name: dshm
    - name: kube-api-access-ndvbc
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:16:00Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:16:01Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:17:51Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:17:51Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://a3e0d9459e0249355c6a4102eabeee1a6764eb4bc5bba27b662ab3c25ad0a0cf
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: database
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:16:01Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/database-containerinfo
        name: database-containerinfo
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/patroni
        name: patroni-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /dev/shm
        name: dshm
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://55a6e92fbbb29e5bf92dd053d69f8ccd0ddc8c5447f33cc27336017003cfa121
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:16:05Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://34059f51a4483b9fd3d4ec7ca7736d35824b161d2e0ea9906f0488ad9d51b882
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest-config
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:16:05Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://f5d831d40ccfe529ffba97a3623f8d3b9114eedcf3c839a319e459d3b02884f5
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: replication-cert-copy
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:16:01Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.46.117
    hostIPs:
    - ip: 10.0.46.117
    initContainerStatuses:
    - containerID: cri-o://61333d3e6a212937ad7956ffc2746ea8d627b8ba43eee133404a4182db9e462e
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: postgres-startup
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://61333d3e6a212937ad7956ffc2746ea8d627b8ba43eee133404a4182db9e462e
          exitCode: 0
          finishedAt: "2025-07-17T18:15:59Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:59Z"
      volumeMounts:
      - mountPath: /pgconf/tls
        name: cert-volume
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgdata
        name: postgres-data
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    - containerID: cri-o://682e0a042e0e23836334086370bdb9369408289c73e9f76efdeb890b8983ff02
      image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-postgres@sha256:5a1174e0d1859caae1220fa0cc07ce114b7d3f0d070c6017cb3bd2d5e6561f6d
      lastState: {}
      name: nss-wrapper-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://682e0a042e0e23836334086370bdb9369408289c73e9f76efdeb890b8983ff02
          exitCode: 0
          finishedAt: "2025-07-17T18:16:00Z"
          reason: Completed
          startedAt: "2025-07-17T18:16:00Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-ndvbc
        readOnly: true
        recursiveReadOnly: Disabled
    phase: Running
    podIP: 10.131.0.89
    podIPs:
    - ip: 10.131.0.89
    qosClass: BestEffort
    startTime: "2025-07-17T18:15:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.88/23"],"mac_address":"0a:58:0a:83:00:58","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.88/23","gateway_ip":"10.131.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.88"
            ],
            "mac": "0a:58:0a:83:00:58",
            "default": true,
            "dns": {}
        }]
      kubectl.kubernetes.io/default-container: pgbouncer
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-07-17T18:15:05Z"
    generateName: mlflow-server-pgbouncer-6b95468849-
    labels:
      pod-template-hash: 6b95468849
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: pgbouncer
    name: mlflow-server-pgbouncer-6b95468849-skz7d
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: mlflow-server-pgbouncer-6b95468849
      uid: 92fe788f-15df-441c-b63a-b60c8b8af4e4
    resourceVersion: "4752722"
    uid: 67d6b604-77db-459a-a1fc-b1b74f43bc88
  spec:
    automountServiceAccountToken: false
    containers:
    - command:
      - pgbouncer
      - /etc/pgbouncer/~postgres-operator.ini
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
      imagePullPolicy: IfNotPresent
      name: pgbouncer
      ports:
      - containerPort: 5432
        name: pgbouncer
        protocol: TCP
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbouncer
        name: pgbouncer-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        exec {fd}<> <(:||:)
        while read -r -t 5 -u "${fd}" ||:; do
          if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] && pkill -HUP --exact pgbouncer
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded configuration dated %y' "${directory}"
          fi
        done
        }; export directory="$1"; export -f monitor; exec -a "$0" bash -ceu monitor
      - pgbouncer-config
      - /etc/pgbouncer
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
      imagePullPolicy: IfNotPresent
      name: pgbouncer-config
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbouncer
        name: pgbouncer-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    imagePullSecrets:
    - name: default-dockercfg-7v4qb
    nodeName: ip-10-0-46-117.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: default
    serviceAccountName: default
    shareProcessNamespace: true
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/role: pgbouncer
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
    - labelSelector:
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/role: pgbouncer
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - name: pgbouncer-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: pgbouncer-empty
              path: pgbouncer.ini
            name: mlflow-server-pgbouncer
        - configMap:
            items:
            - key: pgbouncer.ini
              path: ~postgres-operator.ini
            name: mlflow-server-pgbouncer
        - secret:
            items:
            - key: pgbouncer-users.txt
              path: ~postgres-operator/users.txt
            name: mlflow-server-pgbouncer
        - secret:
            items:
            - key: pgbouncer-frontend.ca-roots
              path: ~postgres-operator/frontend-ca.crt
            - key: pgbouncer-frontend.key
              path: ~postgres-operator/frontend-tls.key
            - key: pgbouncer-frontend.crt
              path: ~postgres-operator/frontend-tls.crt
            name: mlflow-server-pgbouncer
        - secret:
            items:
            - key: ca.crt
              path: ~postgres-operator/backend-ca.crt
            name: mlflow-server-cluster-cert
    - emptyDir:
        sizeLimit: 16Mi
      name: tmp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:36Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:05Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:36Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:36Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:05Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://11d43d4a0aa0f4ab0bb537aeffda0082cc5e6ea8d5577a1054f5f0e7fb7ae560
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer@sha256:bd2f345eb09a4196a10a95eb6dbf743de5517a913ad74621382dcec0273b4bd8
      lastState: {}
      name: pgbouncer
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:36Z"
      volumeMounts:
      - mountPath: /etc/pgbouncer
        name: pgbouncer-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
    - containerID: cri-o://1170df6b0f1605eb8a490816cd19cf7b781490ffab165d45341bc0b18d04406d
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer@sha256:bd2f345eb09a4196a10a95eb6dbf743de5517a913ad74621382dcec0273b4bd8
      lastState: {}
      name: pgbouncer-config
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:36Z"
      volumeMounts:
      - mountPath: /etc/pgbouncer
        name: pgbouncer-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
    hostIP: 10.0.46.117
    hostIPs:
    - ip: 10.0.46.117
    phase: Running
    podIP: 10.131.0.88
    podIPs:
    - ip: 10.131.0.88
    qosClass: BestEffort
    startTime: "2025-07-17T18:15:05Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.129.2.102/23"],"mac_address":"0a:58:0a:81:02:66","gateway_ips":["10.129.2.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.129.2.1"},{"dest":"172.30.0.0/16","nextHop":"10.129.2.1"},{"dest":"169.254.0.5/32","nextHop":"10.129.2.1"},{"dest":"100.64.0.0/16","nextHop":"10.129.2.1"}],"ip_address":"10.129.2.102/23","gateway_ip":"10.129.2.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.129.2.102"
            ],
            "mac": "0a:58:0a:81:02:66",
            "default": true,
            "dns": {}
        }]
      kubectl.kubernetes.io/default-container: pgbackrest
      openshift.io/scc: restricted-v2
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
    creationTimestamp: "2025-07-17T18:15:05Z"
    generateName: mlflow-server-repo-host-
    labels:
      apps.kubernetes.io/pod-index: "0"
      controller-revision-hash: mlflow-server-repo-host-586bf48bc5
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: pgbackrest
      postgres-operator.crunchydata.com/pgbackrest: ""
      postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
      statefulset.kubernetes.io/pod-name: mlflow-server-repo-host-0
    name: mlflow-server-repo-host-0
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: StatefulSet
      name: mlflow-server-repo-host
      uid: 262ba152-e203-48e7-858b-ac5e26e74410
    resourceVersion: "4752405"
    uid: 2d5ff8fd-667b-4a23-bdad-e2ad42acf5ba
  spec:
    automountServiceAccountToken: false
    containers:
    - command:
      - pgbackrest
      - server
      env:
      - name: LD_PRELOAD
        value: /usr/lib64/libnss_wrapper.so
      - name: NSS_WRAPPER_PASSWD
        value: /tmp/nss_wrapper/postgres/passwd
      - name: NSS_WRAPPER_GROUP
        value: /tmp/nss_wrapper/postgres/group
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      livenessProbe:
        exec:
          command:
          - pgbackrest
          - server-ping
        failureThreshold: 3
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      name: pgbackrest
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /pgbackrest/repo1
        name: repo1
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
    - command:
      - bash
      - -ceu
      - --
      - |-
        monitor() {
        exec {fd}<> <(:||:)
        until read -r -t 5 -u "${fd}"; do
          if
            [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --dereference --format='Loaded configuration dated %y' "${filename}"
          elif
            { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
              [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
            } &&
            pkill -HUP --exact --parent=0 pgbackrest
          then
            exec {fd}>&- && exec {fd}<> <(:||:)
            stat --format='Loaded certificates dated %y' "${directory}"
          fi
        done
        }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
      - pgbackrest-config
      - /etc/pgbackrest/server
      - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
      - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: pgbackrest-config
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
      - mountPath: /tmp
        name: tmp
    dnsPolicy: ClusterFirst
    enableServiceLinks: false
    hostname: mlflow-server-repo-host-0
    imagePullSecrets:
    - name: mlflow-server-repohost-dockercfg-kwx6v
    initContainers:
    - command:
      - bash
      - -c
      - mkdir -p '/pgbackrest/repo1/log' && { chmod 0775 '/pgbackrest/repo1/log' ||
        :; }
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: pgbackrest-log-dir
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /pgbackrest/repo1
        name: repo1
      - mountPath: /tmp
        name: tmp
    - command:
      - bash
      - -c
      - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
        \n# Define nss_wrapper directory and passwd & group files that will be utilized
        by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also sets these vars)
        isn't sourced here since the nss_wrapper\n# has not yet been setup, and we
        therefore don't yet want the nss_wrapper vars in the environment.\nmkdir -p
        /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
        create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n# grab
        the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
        -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[ -f
        \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
        -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
        if the username is missing from the passwd file, then add it\nif [[ ! $(cat
        \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n
        \   echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
        \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
        with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
        \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
        >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
        \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
        if the username (which will be the same as the group name) is missing from
        group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
        ]]; then\n    echo \"nss_wrapper: adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n
        \   cp \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
        \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
        >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
        \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
        export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
        & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
        LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
        NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
        configured\"\n"
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imagePullPolicy: IfNotPresent
      name: nss-wrapper-init
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        privileged: false
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    nodeName: ip-10-0-33-124.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      fsGroupChangePolicy: OnRootMismatch
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: mlflow-server-repohost
    serviceAccountName: mlflow-server-repohost
    shareProcessNamespace: true
    subdomain: mlflow-server-pods
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    topologySpreadConstraints:
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: kubernetes.io/hostname
      whenUnsatisfiable: ScheduleAnyway
    - labelSelector:
        matchExpressions:
        - key: postgres-operator.crunchydata.com/data
          operator: In
          values:
          - postgres
          - pgbackrest
        matchLabels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
      maxSkew: 1
      topologyKey: topology.kubernetes.io/zone
      whenUnsatisfiable: ScheduleAnyway
    volumes:
    - name: pgbackrest-server
      projected:
        defaultMode: 420
        sources:
        - secret:
            items:
            - key: pgbackrest-repo-host.crt
              path: server-tls.crt
            - key: pgbackrest-repo-host.key
              mode: 384
              path: server-tls.key
            name: mlflow-server-pgbackrest
    - name: repo1
      persistentVolumeClaim:
        claimName: mlflow-server-repo1
    - name: pgbackrest-config
      projected:
        defaultMode: 420
        sources:
        - configMap:
            items:
            - key: pgbackrest_repo.conf
              path: pgbackrest_repo.conf
            - key: config-hash
              path: config-hash
            - key: pgbackrest-server.conf
              path: ~postgres-operator_server.conf
            name: mlflow-server-pgbackrest-config
        - secret:
            items:
            - key: pgbackrest.ca-roots
              path: ~postgres-operator/tls-ca.crt
            - key: pgbackrest-client.crt
              path: ~postgres-operator/client-tls.crt
            - key: pgbackrest-client.key
              mode: 384
              path: ~postgres-operator/client-tls.key
            name: mlflow-server-pgbackrest
    - emptyDir:
        sizeLimit: 16Mi
      name: tmp
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:26Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:27Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:28Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:28Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:15:08Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://f3ed44a059aff0e22530a6b4912c39a7efecd764e4cc48517d0177a5c3aa0f09
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:27Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /pgbackrest/repo1
        name: repo1
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
    - containerID: cri-o://d84b9aa017e66480fdc3adde9a56a68a928f3a7b68c5b9ee76be8347d4cb2d07
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest-config
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:15:27Z"
      volumeMounts:
      - mountPath: /etc/pgbackrest/server
        name: pgbackrest-server
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /etc/pgbackrest/conf.d
        name: pgbackrest-config
        readOnly: true
        recursiveReadOnly: Disabled
      - mountPath: /tmp
        name: tmp
    hostIP: 10.0.33.124
    hostIPs:
    - ip: 10.0.33.124
    initContainerStatuses:
    - containerID: cri-o://a607dbaadb6c279573270d78c0e7aa7cf163b9a8d6d4e880cb08530e318ad88e
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: pgbackrest-log-dir
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://a607dbaadb6c279573270d78c0e7aa7cf163b9a8d6d4e880cb08530e318ad88e
          exitCode: 0
          finishedAt: "2025-07-17T18:15:26Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:26Z"
      volumeMounts:
      - mountPath: /pgbackrest/repo1
        name: repo1
      - mountPath: /tmp
        name: tmp
    - containerID: cri-o://23de23798a99a20ea6c1af35a1fa9ebaf43bf7fb8c653e52dfb1f4917f186568
      image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      imageID: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest@sha256:2c35208eef1a69efef6c817c58cebd5218a4671259b4809d042c5efeebd71de4
      lastState: {}
      name: nss-wrapper-init
      ready: true
      restartCount: 0
      started: false
      state:
        terminated:
          containerID: cri-o://23de23798a99a20ea6c1af35a1fa9ebaf43bf7fb8c653e52dfb1f4917f186568
          exitCode: 0
          finishedAt: "2025-07-17T18:15:26Z"
          reason: Completed
          startedAt: "2025-07-17T18:15:26Z"
      volumeMounts:
      - mountPath: /tmp
        name: tmp
    phase: Running
    podIP: 10.129.2.102
    podIPs:
    - ip: 10.129.2.102
    qosClass: BestEffort
    startTime: "2025-07-17T18:15:08Z"
- apiVersion: v1
  kind: Pod
  metadata:
    annotations:
      alm-examples: |-
        [
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "CrunchyBridgeCluster",
            "metadata": {
              "name": "example-crunchybridgecluster"
            },
            "spec": {
              "clusterName": "example-bridge-cluster",
              "isHa": false,
              "majorVersion": 16,
              "plan": "standard-4",
              "provider": "aws",
              "region": "us-west-2",
              "secret": "crunchy-bridge-api-key",
              "storage": "10Gi"
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGAdmin",
            "metadata": {
              "name": "example-pgadmin",
              "namespace": "openshift-operators"
            },
            "spec": {
              "dataVolumeClaimSpec": {
                "accessModes": [
                  "ReadWriteOnce"
                ],
                "resources": {
                  "requests": {
                    "storage": "1Gi"
                  }
                }
              },
              "serverGroups": [
                {
                  "name": "Crunchy Postgres for Kubernetes",
                  "postgresClusterSelector": {}
                }
              ]
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PGUpgrade",
            "metadata": {
              "name": "example-upgrade"
            },
            "spec": {
              "fromPostgresVersion": 16,
              "postgresClusterName": "example",
              "toPostgresVersion": 17
            }
          },
          {
            "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
            "kind": "PostgresCluster",
            "metadata": {
              "name": "example"
            },
            "spec": {
              "backups": {
                "pgbackrest": {
                  "repos": [
                    {
                      "name": "repo1",
                      "volume": {
                        "volumeClaimSpec": {
                          "accessModes": [
                            "ReadWriteOnce"
                          ],
                          "resources": {
                            "requests": {
                              "storage": "1Gi"
                            }
                          }
                        }
                      }
                    }
                  ]
                }
              },
              "instances": [
                {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "replicas": 1
                }
              ],
              "postgresVersion": 16
            }
          }
        ]
      capabilities: Auto Pilot
      categories: Database
      containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
      createdAt: 2019-12-31 19:40Z
      description: Production Postgres Made Easy
      features.operators.openshift.io/cnf: "false"
      features.operators.openshift.io/cni: "false"
      features.operators.openshift.io/csi: "false"
      features.operators.openshift.io/disconnected: "false"
      features.operators.openshift.io/fips-compliant: "false"
      features.operators.openshift.io/proxy-aware: "false"
      features.operators.openshift.io/tls-profiles: "false"
      features.operators.openshift.io/token-auth-aws: "false"
      features.operators.openshift.io/token-auth-azure: "false"
      features.operators.openshift.io/token-auth-gcp: "false"
      k8s.ovn.org/pod-networks: '{"default":{"ip_addresses":["10.131.0.85/23"],"mac_address":"0a:58:0a:83:00:55","gateway_ips":["10.131.0.1"],"routes":[{"dest":"10.128.0.0/14","nextHop":"10.131.0.1"},{"dest":"172.30.0.0/16","nextHop":"10.131.0.1"},{"dest":"169.254.0.5/32","nextHop":"10.131.0.1"},{"dest":"100.64.0.0/16","nextHop":"10.131.0.1"}],"ip_address":"10.131.0.85/23","gateway_ip":"10.131.0.1","role":"primary"}}'
      k8s.v1.cni.cncf.io/network-status: |-
        [{
            "name": "ovn-kubernetes",
            "interface": "eth0",
            "ips": [
                "10.131.0.85"
            ],
            "mac": "0a:58:0a:83:00:55",
            "default": true,
            "dns": {}
        }]
      olm.operatorGroup: mlflow-g2qsn
      olm.operatorNamespace: mlflow
      olm.targetNamespaces: mlflow
      openshift.io/scc: restricted-v2
      operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"CrunchyBridgeCluster","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGAdmin","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGUpgrade","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PostgresCluster","version":"v1beta1"}},{"type":"olm.package","value":{"packageName":"postgresql","version":"5.8.2"}}]}'
      repository: https://github.com/CrunchyData/postgres-operator
      seccomp.security.alpha.kubernetes.io/pod: runtime/default
      support: crunchydata.com
    creationTimestamp: "2025-07-17T18:12:25Z"
    generateName: pgo-676bf9558c-
    labels:
      pod-template-hash: 676bf9558c
      postgres-operator.crunchydata.com/control-plane: postgres-operator
    name: pgo-676bf9558c-7v8sw
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: ReplicaSet
      name: pgo-676bf9558c
      uid: 217696f3-ba59-4a7a-a825-4d84c0a6f15c
    resourceVersion: "4745343"
    uid: 3e047c4a-b417-472f-8c9f-39ca0ddbe70b
  spec:
    containers:
    - env:
      - name: REGISTRATION_REQUIRED
        value: "true"
      - name: TOKEN_PATH
        value: /etc/cpk/cpk_token
      - name: REGISTRATION_URL
        value: https://access.crunchydata.com/register-cpk
      - name: RSA_KEY
        value: |-
          -----BEGIN PUBLIC KEY-----
          MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0JWaCc/F+/uV5zJQ7ryN
          uzvO+oGgT7z9uXm11qtKae86H3Z3W4qX+gGPs5LrFg444yDRMLqKzPLwuS2yc4mz
          QxtVbJyBZijbEDVd/knycj6MxFdBkbjxeGeWYT8nuZf4jBnWB48/O+uUnCbIYt8Q
          hUtyJ+KMIXkxrOd4mOgL6dQSCEAIcxBh10ZAucDQIgCn2BrD595uPrvlrrioV/Nq
          P0w0qIaKS785YU75qM4rT8tGeWVMEGst4AaRwfV7ZdVe065TP0hjd9sv8iJkr7En
          /Zym1NXcKbpwoeT3X9E7cVSARPFhZU1mmtL56wq3QLeFxef9TmVva1/Io0mKn4ah
          Uly5jgOpazrXliKJUoOurfMOakkHWfqSd5EfmRTh5nBcNqxtytLdiH0WlCkPSm+Z
          Ue3aY91YwcRnFhImLpbQYD5aVLAryzu+IdfRJa+zcZYSK0N8n9irg6jSrQZBct7z
          OagHUc0n/ZDP/BO8m0jlpJ7jH+N31Z5qFoNSaxf5H1Y/CwByXtzHJ1k2LleYsr9k
          k40nMY4l+SXCe4PmW4zW9uP3ItBWKEI2jFrRJgowQvL0MwtzDhbX9qg4+L9eBFpK
          jpHXr2kgLu4srIyXH6JO5UmE/62mHZh0SuqtOT1GQqWde5RjZyidYkwkAHup/AqA
          P0TPL/poQ6yvI9a0i22TCpcCAwEAAQ==
          -----END PUBLIC KEY-----
      - name: PGO_TARGET_NAMESPACES
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.annotations['olm.targetNamespaces']
      - name: PGO_NAMESPACE
        valueFrom:
          fieldRef:
            apiVersion: v1
            fieldPath: metadata.namespace
      - name: CRUNCHY_DEBUG
        value: "true"
      - name: PGO_INSTALLER
        value: olm
      - name: PGO_INSTALLER_ORIGIN
        value: operatorhub-community
      - name: PGO_CONTROLLER_LEASE_NAME
        value: cpk-leader-election-lease
      - name: RELATED_IMAGE_POSTGRES_16
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
      - name: RELATED_IMAGE_POSTGRES_17
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-17.5-2520
      - name: RELATED_IMAGE_POSTGRES_16_GIS_3.3
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.3-2520
      - name: RELATED_IMAGE_POSTGRES_16_GIS_3.4
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.4-2520
      - name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.4-2520
      - name: RELATED_IMAGE_POSTGRES_17_GIS_3.5
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.5-2520
      - name: RELATED_IMAGE_PGBACKREST
        value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
      - name: RELATED_IMAGE_PGBOUNCER
        value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
      - name: RELATED_IMAGE_PGEXPORTER
        value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-exporter:ubi9-0.17.1-2520
      - name: RELATED_IMAGE_PGUPGRADE
        value: registry.developers.crunchydata.com/crunchydata/crunchy-upgrade:ubi9-17.5-2520
      - name: RELATED_IMAGE_STANDALONE_PGADMIN
        value: registry.developers.crunchydata.com/crunchydata/crunchy-pgadmin4:ubi9-9.2-2520
      - name: RELATED_IMAGE_COLLECTOR
        value: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
      - name: OPERATOR_CONDITION_NAME
        value: postgresoperator.v5.8.2
      image: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
      imagePullPolicy: IfNotPresent
      livenessProbe:
        failureThreshold: 3
        httpGet:
          path: /readyz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 15
        periodSeconds: 20
        successThreshold: 1
        timeoutSeconds: 1
      name: operator
      ports:
      - containerPort: 8443
        name: metrics
        protocol: TCP
      readinessProbe:
        failureThreshold: 3
        httpGet:
          path: /healthz
          port: 8081
          scheme: HTTP
        initialDelaySeconds: 5
        periodSeconds: 10
        successThreshold: 1
        timeoutSeconds: 1
      resources: {}
      securityContext:
        allowPrivilegeEscalation: false
        capabilities:
          drop:
          - ALL
        readOnlyRootFilesystem: true
        runAsNonRoot: true
        runAsUser: 1000930000
        seccompProfile:
          type: RuntimeDefault
      terminationMessagePath: /dev/termination-log
      terminationMessagePolicy: File
      volumeMounts:
      - mountPath: /etc/cpk
        name: cpk-registration-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dcq7j
        readOnly: true
    dnsPolicy: ClusterFirst
    enableServiceLinks: true
    imagePullSecrets:
    - name: pgo-dockercfg-htlp6
    nodeName: ip-10-0-46-117.us-east-2.compute.internal
    preemptionPolicy: PreemptLowerPriority
    priority: 0
    restartPolicy: Always
    schedulerName: default-scheduler
    securityContext:
      fsGroup: 1000930000
      seLinuxOptions:
        level: s0:c31,c0
      seccompProfile:
        type: RuntimeDefault
    serviceAccount: pgo
    serviceAccountName: pgo
    terminationGracePeriodSeconds: 30
    tolerations:
    - effect: NoExecute
      key: node.kubernetes.io/not-ready
      operator: Exists
      tolerationSeconds: 300
    - effect: NoExecute
      key: node.kubernetes.io/unreachable
      operator: Exists
      tolerationSeconds: 300
    volumes:
    - name: cpk-registration-volume
      secret:
        defaultMode: 420
        optional: true
        secretName: cpk-registration
    - name: kube-api-access-dcq7j
      projected:
        defaultMode: 420
        sources:
        - serviceAccountToken:
            expirationSeconds: 3607
            path: token
        - configMap:
            items:
            - key: ca.crt
              path: ca.crt
            name: kube-root-ca.crt
        - downwardAPI:
            items:
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
              path: namespace
        - configMap:
            items:
            - key: service-ca.crt
              path: service-ca.crt
            name: openshift-service-ca.crt
  status:
    conditions:
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:12:35Z"
      status: "True"
      type: PodReadyToStartContainers
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:12:25Z"
      status: "True"
      type: Initialized
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:12:45Z"
      status: "True"
      type: Ready
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:12:45Z"
      status: "True"
      type: ContainersReady
    - lastProbeTime: null
      lastTransitionTime: "2025-07-17T18:12:25Z"
      status: "True"
      type: PodScheduled
    containerStatuses:
    - containerID: cri-o://c54f6282c84d62bd2581503425ff2d53fd735ee19324edf4eb710141e875fd7f
      image: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
      imageID: registry.developers.crunchydata.com/crunchydata/postgres-operator@sha256:2e010468471f3c55acdfe67e7b71d15af973fb5708d4a1199eeace03e4da4d69
      lastState: {}
      name: operator
      ready: true
      restartCount: 0
      started: true
      state:
        running:
          startedAt: "2025-07-17T18:12:35Z"
      volumeMounts:
      - mountPath: /etc/cpk
        name: cpk-registration-volume
      - mountPath: /var/run/secrets/kubernetes.io/serviceaccount
        name: kube-api-access-dcq7j
        readOnly: true
        recursiveReadOnly: Disabled
    hostIP: 10.0.46.117
    hostIPs:
    - ip: 10.0.46.117
    phase: Running
    podIP: 10.131.0.85
    podIPs:
    - ip: 10.131.0.85
    qosClass: BestEffort
    startTime: "2025-07-17T18:12:25Z"
- apiVersion: v1
  kind: Service
  metadata:
    annotations:
      meta.helm.sh/release-name: mlflow-server
      meta.helm.sh/release-namespace: mlflow
      service.alpha.openshift.io/serving-cert-secret-name: mlflow-server-tls
      service.alpha.openshift.io/serving-cert-signed-by: openshift-service-serving-signer@1752500369
      service.beta.openshift.io/serving-cert-signed-by: openshift-service-serving-signer@1752500369
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mlflow-server
      app.kubernetes.io/version: "2.16"
      helm.sh/chart: mlflow-server-0.7.1
    name: mlflow-server
    namespace: mlflow
    resourceVersion: "4751450"
    uid: 721f6c1d-14e0-4a10-9714-34171e6e435d
  spec:
    clusterIP: 172.30.46.121
    clusterIPs:
    - 172.30.46.121
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: mlflow-server
      port: 8080
      protocol: TCP
      targetPort: mlflow-server
    - name: oauth
      port: 8443
      protocol: TCP
      targetPort: oauth-proxy
    selector:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/name: mlflow-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/patroni: mlflow-server-ha
    name: mlflow-server-ha
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751491"
    uid: 823eeae8-05a3-4fe1-949a-80f3b720ee61
  spec:
    clusterIP: 172.30.225.215
    clusterIPs:
    - 172.30.225.215
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:05Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/patroni: mlflow-server-ha
    name: mlflow-server-ha-config
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751503"
    uid: a986ef93-f7ec-4a3e-a091-e5eb600a8ae9
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    - IPv6
    ipFamilyPolicy: RequireDualStack
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:05Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: pgbouncer
    name: mlflow-server-pgbouncer
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751584"
    uid: 18cc2bc6-7595-486b-971c-d74c9bb9f3ea
  spec:
    clusterIP: 172.30.51.128
    clusterIPs:
    - 172.30.51.128
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: pgbouncer
      port: 5432
      protocol: TCP
      targetPort: pgbouncer
    selector:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: pgbouncer
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
    name: mlflow-server-pods
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751471"
    uid: 2e7eebef-baa2-49b5-9a9f-700d20397f86
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    publishNotReadyAddresses: true
    selector:
      postgres-operator.crunchydata.com/cluster: mlflow-server
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: primary
    name: mlflow-server-primary
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751492"
    uid: c4081e44-f31f-419d-8245-95ec3b749484
  spec:
    clusterIP: None
    clusterIPs:
    - None
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    - IPv6
    ipFamilyPolicy: RequireDualStack
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: v1
  kind: Service
  metadata:
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: replica
    name: mlflow-server-replicas
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4751496"
    uid: 1dd9e019-8e5f-4390-bd35-ee3dc63b6e6c
  spec:
    clusterIP: 172.30.34.198
    clusterIPs:
    - 172.30.34.198
    internalTrafficPolicy: Cluster
    ipFamilies:
    - IPv4
    ipFamilyPolicy: SingleStack
    ports:
    - name: postgres
      port: 5432
      protocol: TCP
      targetPort: postgres
    selector:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: replica
    sessionAffinity: None
    type: ClusterIP
  status:
    loadBalancer: {}
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      app.openshift.io/vcs-uri: github.com/strangiato/mlflow-server
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: mlflow-server
      meta.helm.sh/release-namespace: mlflow
    creationTimestamp: "2025-07-17T18:15:04Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mlflow-server
      app.kubernetes.io/version: "2.16"
      helm.sh/chart: mlflow-server-0.7.1
    name: mlflow-server
    namespace: mlflow
    resourceVersion: "11493433"
    uid: af74a319-55e8-4675-a10f-78f671c082a6
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        app.kubernetes.io/instance: mlflow-server
        app.kubernetes.io/name: mlflow-server
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 25%
      type: RollingUpdate
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: mlflow-server
          app.kubernetes.io/name: mlflow-server
      spec:
        containers:
        - env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: mlflow-server
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: mlflow-server
          - name: MLFLOW_S3_BUCKET_NAME
            valueFrom:
              configMapKeyRef:
                key: BUCKET_NAME
                name: mlflow-server
          - name: BUCKET_HOST
            valueFrom:
              configMapKeyRef:
                key: BUCKET_HOST
                name: mlflow-server
          - name: BUCKET_PORT
            valueFrom:
              configMapKeyRef:
                key: BUCKET_PORT
                name: mlflow-server
          - name: MLFLOW_S3_ENDPOINT_URL
            value: https://$(BUCKET_HOST):$(BUCKET_PORT)
          - name: AWS_CA_BUNDLE
            value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: PGBOUNCE_HOST
            valueFrom:
              secretKeyRef:
                key: pgbouncer-host
                name: mlflow-server-pguser-mlflow-server
          - name: PGBOUNCE_PORT
            valueFrom:
              secretKeyRef:
                key: pgbouncer-port
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_HOST
            value: $(PGBOUNCE_HOST):$(PGBOUNCE_PORT)
          - name: MLFLOW_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: dbname
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                key: user
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_PORT
            value: "8080"
          - name: MLFLOW_S3_IGNORE_TLS
            value: "true"
          image: quay.io/troyer/mlflow-server:2.16
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mlflow-server
          ports:
          - containerPort: 8080
            name: mlflow-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-sar={"namespace":"mlflow","resource":"services","resourceName":"mlflow-server","verb":"get"}
          - --openshift-service-account=mlflow-server
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: oauth-proxy
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: oauth-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: mlflow-server
        serviceAccountName: mlflow-server
        terminationGracePeriodSeconds: 30
        volumes:
        - name: oauth-tls
          secret:
            defaultMode: 420
            secretName: mlflow-server-tls
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-21T07:10:06Z"
      lastUpdateTime: "2025-07-21T07:10:06Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-17T18:15:04Z"
      lastUpdateTime: "2025-07-21T07:16:49Z"
      message: ReplicaSet "mlflow-server-56c89dbd68" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-17T18:15:05Z"
    generation: 1
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: pgbouncer
    name: mlflow-server-pgbouncer
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4752728"
    uid: a839ae6b-2447-4ebf-9926-c9607967c96f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 0
    selector:
      matchLabels:
        postgres-operator.crunchydata.com/cluster: mlflow-server
        postgres-operator.crunchydata.com/role: pgbouncer
    strategy:
      rollingUpdate:
        maxSurge: 25%
        maxUnavailable: 0
      type: RollingUpdate
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: pgbouncer
        creationTimestamp: null
        labels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/role: pgbouncer
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - pgbouncer
          - /etc/pgbouncer/~postgres-operator.ini
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          imagePullPolicy: IfNotPresent
          name: pgbouncer
          ports:
          - containerPort: 5432
            name: pgbouncer
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbouncer
            name: pgbouncer-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            exec {fd}<> <(:||:)
            while read -r -t 5 -u "${fd}" ||:; do
              if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] && pkill -HUP --exact pgbouncer
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded configuration dated %y' "${directory}"
              fi
            done
            }; export directory="$1"; export -f monitor; exec -a "$0" bash -ceu monitor
          - pgbouncer-config
          - /etc/pgbouncer
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          imagePullPolicy: IfNotPresent
          name: pgbouncer-config
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbouncer
            name: pgbouncer-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
              postgres-operator.crunchydata.com/role: pgbouncer
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
              postgres-operator.crunchydata.com/role: pgbouncer
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: pgbouncer-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbouncer-empty
                  path: pgbouncer.ini
                name: mlflow-server-pgbouncer
            - configMap:
                items:
                - key: pgbouncer.ini
                  path: ~postgres-operator.ini
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: pgbouncer-users.txt
                  path: ~postgres-operator/users.txt
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: pgbouncer-frontend.ca-roots
                  path: ~postgres-operator/frontend-ca.crt
                - key: pgbouncer-frontend.key
                  path: ~postgres-operator/frontend-tls.key
                - key: pgbouncer-frontend.crt
                  path: ~postgres-operator/frontend-tls.crt
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: ca.crt
                  path: ~postgres-operator/backend-ca.crt
                name: mlflow-server-cluster-cert
        - emptyDir:
            sizeLimit: 16Mi
          name: tmp
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-17T18:15:37Z"
      lastUpdateTime: "2025-07-17T18:15:37Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-17T18:15:05Z"
      lastUpdateTime: "2025-07-17T18:15:37Z"
      message: ReplicaSet "mlflow-server-pgbouncer-6b95468849" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: Deployment
  metadata:
    annotations:
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-17T18:12:25Z"
    generation: 2
    labels:
      olm.deployment-spec-hash: aAsFQAVyAOPLGqDu0jzfJyjAH01TMUV51kwpyh
      olm.managed: "true"
      olm.owner: postgresoperator.v5.8.2
      olm.owner.kind: ClusterServiceVersion
      olm.owner.namespace: mlflow
      operators.coreos.com/postgresql.mlflow: ""
    name: pgo
    namespace: mlflow
    ownerReferences:
    - apiVersion: operators.coreos.com/v1alpha1
      blockOwnerDeletion: false
      controller: false
      kind: ClusterServiceVersion
      name: postgresoperator.v5.8.2
      uid: 2dbb3926-49bf-4e73-9a86-30aa1e15591c
    resourceVersion: "4745347"
    uid: 0e34d166-37e7-4455-a2ab-d0fe97cf273f
  spec:
    progressDeadlineSeconds: 600
    replicas: 1
    revisionHistoryLimit: 1
    selector:
      matchLabels:
        postgres-operator.crunchydata.com/control-plane: postgres-operator
    strategy:
      type: Recreate
    template:
      metadata:
        annotations:
          alm-examples: |-
            [
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "CrunchyBridgeCluster",
                "metadata": {
                  "name": "example-crunchybridgecluster"
                },
                "spec": {
                  "clusterName": "example-bridge-cluster",
                  "isHa": false,
                  "majorVersion": 16,
                  "plan": "standard-4",
                  "provider": "aws",
                  "region": "us-west-2",
                  "secret": "crunchy-bridge-api-key",
                  "storage": "10Gi"
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PGAdmin",
                "metadata": {
                  "name": "example-pgadmin",
                  "namespace": "openshift-operators"
                },
                "spec": {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "serverGroups": [
                    {
                      "name": "Crunchy Postgres for Kubernetes",
                      "postgresClusterSelector": {}
                    }
                  ]
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PGUpgrade",
                "metadata": {
                  "name": "example-upgrade"
                },
                "spec": {
                  "fromPostgresVersion": 16,
                  "postgresClusterName": "example",
                  "toPostgresVersion": 17
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PostgresCluster",
                "metadata": {
                  "name": "example"
                },
                "spec": {
                  "backups": {
                    "pgbackrest": {
                      "repos": [
                        {
                          "name": "repo1",
                          "volume": {
                            "volumeClaimSpec": {
                              "accessModes": [
                                "ReadWriteOnce"
                              ],
                              "resources": {
                                "requests": {
                                  "storage": "1Gi"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "instances": [
                    {
                      "dataVolumeClaimSpec": {
                        "accessModes": [
                          "ReadWriteOnce"
                        ],
                        "resources": {
                          "requests": {
                            "storage": "1Gi"
                          }
                        }
                      },
                      "replicas": 1
                    }
                  ],
                  "postgresVersion": 16
                }
              }
            ]
          capabilities: Auto Pilot
          categories: Database
          containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          createdAt: 2019-12-31 19:40Z
          description: Production Postgres Made Easy
          features.operators.openshift.io/cnf: "false"
          features.operators.openshift.io/cni: "false"
          features.operators.openshift.io/csi: "false"
          features.operators.openshift.io/disconnected: "false"
          features.operators.openshift.io/fips-compliant: "false"
          features.operators.openshift.io/proxy-aware: "false"
          features.operators.openshift.io/tls-profiles: "false"
          features.operators.openshift.io/token-auth-aws: "false"
          features.operators.openshift.io/token-auth-azure: "false"
          features.operators.openshift.io/token-auth-gcp: "false"
          olm.operatorGroup: mlflow-g2qsn
          olm.operatorNamespace: mlflow
          olm.targetNamespaces: mlflow
          operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"CrunchyBridgeCluster","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGAdmin","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGUpgrade","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PostgresCluster","version":"v1beta1"}},{"type":"olm.package","value":{"packageName":"postgresql","version":"5.8.2"}}]}'
          repository: https://github.com/CrunchyData/postgres-operator
          support: crunchydata.com
        creationTimestamp: null
        labels:
          postgres-operator.crunchydata.com/control-plane: postgres-operator
      spec:
        containers:
        - env:
          - name: REGISTRATION_REQUIRED
            value: "true"
          - name: TOKEN_PATH
            value: /etc/cpk/cpk_token
          - name: REGISTRATION_URL
            value: https://access.crunchydata.com/register-cpk
          - name: RSA_KEY
            value: |-
              -----BEGIN PUBLIC KEY-----
              MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0JWaCc/F+/uV5zJQ7ryN
              uzvO+oGgT7z9uXm11qtKae86H3Z3W4qX+gGPs5LrFg444yDRMLqKzPLwuS2yc4mz
              QxtVbJyBZijbEDVd/knycj6MxFdBkbjxeGeWYT8nuZf4jBnWB48/O+uUnCbIYt8Q
              hUtyJ+KMIXkxrOd4mOgL6dQSCEAIcxBh10ZAucDQIgCn2BrD595uPrvlrrioV/Nq
              P0w0qIaKS785YU75qM4rT8tGeWVMEGst4AaRwfV7ZdVe065TP0hjd9sv8iJkr7En
              /Zym1NXcKbpwoeT3X9E7cVSARPFhZU1mmtL56wq3QLeFxef9TmVva1/Io0mKn4ah
              Uly5jgOpazrXliKJUoOurfMOakkHWfqSd5EfmRTh5nBcNqxtytLdiH0WlCkPSm+Z
              Ue3aY91YwcRnFhImLpbQYD5aVLAryzu+IdfRJa+zcZYSK0N8n9irg6jSrQZBct7z
              OagHUc0n/ZDP/BO8m0jlpJ7jH+N31Z5qFoNSaxf5H1Y/CwByXtzHJ1k2LleYsr9k
              k40nMY4l+SXCe4PmW4zW9uP3ItBWKEI2jFrRJgowQvL0MwtzDhbX9qg4+L9eBFpK
              jpHXr2kgLu4srIyXH6JO5UmE/62mHZh0SuqtOT1GQqWde5RjZyidYkwkAHup/AqA
              P0TPL/poQ6yvI9a0i22TCpcCAwEAAQ==
              -----END PUBLIC KEY-----
          - name: PGO_TARGET_NAMESPACES
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['olm.targetNamespaces']
          - name: PGO_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CRUNCHY_DEBUG
            value: "true"
          - name: PGO_INSTALLER
            value: olm
          - name: PGO_INSTALLER_ORIGIN
            value: operatorhub-community
          - name: PGO_CONTROLLER_LEASE_NAME
            value: cpk-leader-election-lease
          - name: RELATED_IMAGE_POSTGRES_16
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          - name: RELATED_IMAGE_POSTGRES_17
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-17.5-2520
          - name: RELATED_IMAGE_POSTGRES_16_GIS_3.3
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.3-2520
          - name: RELATED_IMAGE_POSTGRES_16_GIS_3.4
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.4-2520
          - name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.4-2520
          - name: RELATED_IMAGE_POSTGRES_17_GIS_3.5
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.5-2520
          - name: RELATED_IMAGE_PGBACKREST
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          - name: RELATED_IMAGE_PGBOUNCER
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          - name: RELATED_IMAGE_PGEXPORTER
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-exporter:ubi9-0.17.1-2520
          - name: RELATED_IMAGE_PGUPGRADE
            value: registry.developers.crunchydata.com/crunchydata/crunchy-upgrade:ubi9-17.5-2520
          - name: RELATED_IMAGE_STANDALONE_PGADMIN
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgadmin4:ubi9-9.2-2520
          - name: RELATED_IMAGE_COLLECTOR
            value: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          - name: OPERATOR_CONDITION_NAME
            value: postgresoperator.v5.8.2
          image: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: operator
          ports:
          - containerPort: 8443
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cpk
            name: cpk-registration-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pgo
        serviceAccountName: pgo
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cpk-registration-volume
          secret:
            defaultMode: 420
            optional: true
            secretName: cpk-registration
  status:
    availableReplicas: 1
    conditions:
    - lastTransitionTime: "2025-07-17T18:12:45Z"
      lastUpdateTime: "2025-07-17T18:12:45Z"
      message: Deployment has minimum availability.
      reason: MinimumReplicasAvailable
      status: "True"
      type: Available
    - lastTransitionTime: "2025-07-17T18:12:25Z"
      lastUpdateTime: "2025-07-17T18:12:45Z"
      message: ReplicaSet "pgo-676bf9558c" has successfully progressed.
      reason: NewReplicaSetAvailable
      status: "True"
      type: Progressing
    observedGeneration: 2
    readyReplicas: 1
    replicas: 1
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      app.openshift.io/vcs-uri: github.com/strangiato/mlflow-server
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
      meta.helm.sh/release-name: mlflow-server
      meta.helm.sh/release-namespace: mlflow
    creationTimestamp: "2025-07-17T18:15:04Z"
    generation: 2
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/name: mlflow-server
      pod-template-hash: 559d5db64b
    name: mlflow-server-559d5db64b
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mlflow-server
      uid: af74a319-55e8-4675-a10f-78f671c082a6
    resourceVersion: "11493429"
    uid: e9629b1f-31f3-4ca5-bdfd-4825b6feebf0
  spec:
    replicas: 0
    selector:
      matchLabels:
        app.kubernetes.io/instance: mlflow-server
        app.kubernetes.io/name: mlflow-server
        pod-template-hash: 559d5db64b
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: mlflow-server
          app.kubernetes.io/name: mlflow-server
          pod-template-hash: 559d5db64b
      spec:
        containers:
        - env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: mlflow-server
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: mlflow-server
          - name: MLFLOW_S3_BUCKET_NAME
            valueFrom:
              configMapKeyRef:
                key: BUCKET_NAME
                name: mlflow-server
          - name: BUCKET_HOST
            valueFrom:
              configMapKeyRef:
                key: BUCKET_HOST
                name: mlflow-server
          - name: BUCKET_PORT
            valueFrom:
              configMapKeyRef:
                key: BUCKET_PORT
                name: mlflow-server
          - name: MLFLOW_S3_ENDPOINT_URL
            value: https://$(BUCKET_HOST):$(BUCKET_PORT)
          - name: AWS_CA_BUNDLE
            value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: PGBOUNCE_HOST
            valueFrom:
              secretKeyRef:
                key: pgbouncer-host
                name: mlflow-server-pguser-mlflow-server
          - name: PGBOUNCE_PORT
            valueFrom:
              secretKeyRef:
                key: pgbouncer-port
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_HOST
            value: $(PGBOUNCE_HOST):$(PGBOUNCE_PORT)
          - name: MLFLOW_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: dbname
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                key: user
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_PORT
            value: "8080"
          image: quay.io/troyer/mlflow-server:2.16
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mlflow-server
          ports:
          - containerPort: 8080
            name: mlflow-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-sar={"namespace":"mlflow","resource":"services","resourceName":"mlflow-server","verb":"get"}
          - --openshift-service-account=mlflow-server
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: oauth-proxy
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: oauth-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: mlflow-server
        serviceAccountName: mlflow-server
        terminationGracePeriodSeconds: 30
        volumes:
        - name: oauth-tls
          secret:
            defaultMode: 420
            secretName: mlflow-server-tls
  status:
    observedGeneration: 2
    replicas: 0
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      app.openshift.io/vcs-uri: github.com/strangiato/mlflow-server
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "2"
      meta.helm.sh/release-name: mlflow-server
      meta.helm.sh/release-namespace: mlflow
    creationTimestamp: "2025-07-21T07:16:18Z"
    generation: 1
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/name: mlflow-server
      pod-template-hash: 56c89dbd68
    name: mlflow-server-56c89dbd68
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mlflow-server
      uid: af74a319-55e8-4675-a10f-78f671c082a6
    resourceVersion: "11493420"
    uid: 23948b59-0d26-47f8-a621-89589c93a90b
  spec:
    replicas: 1
    selector:
      matchLabels:
        app.kubernetes.io/instance: mlflow-server
        app.kubernetes.io/name: mlflow-server
        pod-template-hash: 56c89dbd68
    template:
      metadata:
        creationTimestamp: null
        labels:
          app.kubernetes.io/instance: mlflow-server
          app.kubernetes.io/name: mlflow-server
          pod-template-hash: 56c89dbd68
      spec:
        containers:
        - env:
          - name: AWS_ACCESS_KEY_ID
            valueFrom:
              secretKeyRef:
                key: AWS_ACCESS_KEY_ID
                name: mlflow-server
          - name: AWS_SECRET_ACCESS_KEY
            valueFrom:
              secretKeyRef:
                key: AWS_SECRET_ACCESS_KEY
                name: mlflow-server
          - name: MLFLOW_S3_BUCKET_NAME
            valueFrom:
              configMapKeyRef:
                key: BUCKET_NAME
                name: mlflow-server
          - name: BUCKET_HOST
            valueFrom:
              configMapKeyRef:
                key: BUCKET_HOST
                name: mlflow-server
          - name: BUCKET_PORT
            valueFrom:
              configMapKeyRef:
                key: BUCKET_PORT
                name: mlflow-server
          - name: MLFLOW_S3_ENDPOINT_URL
            value: https://$(BUCKET_HOST):$(BUCKET_PORT)
          - name: AWS_CA_BUNDLE
            value: /run/secrets/kubernetes.io/serviceaccount/service-ca.crt
          - name: PGBOUNCE_HOST
            valueFrom:
              secretKeyRef:
                key: pgbouncer-host
                name: mlflow-server-pguser-mlflow-server
          - name: PGBOUNCE_PORT
            valueFrom:
              secretKeyRef:
                key: pgbouncer-port
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_HOST
            value: $(PGBOUNCE_HOST):$(PGBOUNCE_PORT)
          - name: MLFLOW_DATABASE_NAME
            valueFrom:
              secretKeyRef:
                key: dbname
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_PASSWORD
            valueFrom:
              secretKeyRef:
                key: password
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_DATABASE_USERNAME
            valueFrom:
              secretKeyRef:
                key: user
                name: mlflow-server-pguser-mlflow-server
          - name: MLFLOW_PORT
            value: "8080"
          - name: MLFLOW_S3_IGNORE_TLS
            value: "true"
          image: quay.io/troyer/mlflow-server:2.16
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: mlflow-server
          ports:
          - containerPort: 8080
            name: mlflow-server
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /health
              port: mlflow-server
              scheme: HTTP
            initialDelaySeconds: 30
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
        - args:
          - --https-address=:8443
          - --provider=openshift
          - --openshift-sar={"namespace":"mlflow","resource":"services","resourceName":"mlflow-server","verb":"get"}
          - --openshift-service-account=mlflow-server
          - --upstream=http://localhost:8080
          - --tls-cert=/etc/tls/private/tls.crt
          - --tls-key=/etc/tls/private/tls.key
          - --cookie-secret=SECRET
          image: registry.redhat.io/openshift4/ose-oauth-proxy:v4.12
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: oauth-proxy
          ports:
          - containerPort: 8443
            name: oauth-proxy
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /oauth/healthz
              port: 8443
              scheme: HTTPS
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/tls/private
            name: oauth-tls
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: mlflow-server
        serviceAccountName: mlflow-server
        terminationGracePeriodSeconds: 30
        volumes:
        - name: oauth-tls
          secret:
            defaultMode: 420
            secretName: mlflow-server-tls
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "2"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-17T18:15:05Z"
    generation: 1
    labels:
      pod-template-hash: 6b95468849
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/role: pgbouncer
    name: mlflow-server-pgbouncer-6b95468849
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: mlflow-server-pgbouncer
      uid: a839ae6b-2447-4ebf-9926-c9607967c96f
    resourceVersion: "4752727"
    uid: 92fe788f-15df-441c-b63a-b60c8b8af4e4
  spec:
    replicas: 1
    selector:
      matchLabels:
        pod-template-hash: 6b95468849
        postgres-operator.crunchydata.com/cluster: mlflow-server
        postgres-operator.crunchydata.com/role: pgbouncer
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: pgbouncer
        creationTimestamp: null
        labels:
          pod-template-hash: 6b95468849
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/role: pgbouncer
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - pgbouncer
          - /etc/pgbouncer/~postgres-operator.ini
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          imagePullPolicy: IfNotPresent
          name: pgbouncer
          ports:
          - containerPort: 5432
            name: pgbouncer
            protocol: TCP
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbouncer
            name: pgbouncer-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            exec {fd}<> <(:||:)
            while read -r -t 5 -u "${fd}" ||:; do
              if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] && pkill -HUP --exact pgbouncer
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded configuration dated %y' "${directory}"
              fi
            done
            }; export directory="$1"; export -f monitor; exec -a "$0" bash -ceu monitor
          - pgbouncer-config
          - /etc/pgbouncer
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          imagePullPolicy: IfNotPresent
          name: pgbouncer-config
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbouncer
            name: pgbouncer-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
              postgres-operator.crunchydata.com/role: pgbouncer
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
              postgres-operator.crunchydata.com/role: pgbouncer
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: pgbouncer-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbouncer-empty
                  path: pgbouncer.ini
                name: mlflow-server-pgbouncer
            - configMap:
                items:
                - key: pgbouncer.ini
                  path: ~postgres-operator.ini
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: pgbouncer-users.txt
                  path: ~postgres-operator/users.txt
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: pgbouncer-frontend.ca-roots
                  path: ~postgres-operator/frontend-ca.crt
                - key: pgbouncer-frontend.key
                  path: ~postgres-operator/frontend-tls.key
                - key: pgbouncer-frontend.crt
                  path: ~postgres-operator/frontend-tls.crt
                name: mlflow-server-pgbouncer
            - secret:
                items:
                - key: ca.crt
                  path: ~postgres-operator/backend-ca.crt
                name: mlflow-server-cluster-cert
        - emptyDir:
            sizeLimit: 16Mi
          name: tmp
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: ReplicaSet
  metadata:
    annotations:
      deployment.kubernetes.io/desired-replicas: "1"
      deployment.kubernetes.io/max-replicas: "1"
      deployment.kubernetes.io/revision: "1"
    creationTimestamp: "2025-07-17T18:12:25Z"
    generation: 1
    labels:
      pod-template-hash: 676bf9558c
      postgres-operator.crunchydata.com/control-plane: postgres-operator
    name: pgo-676bf9558c
    namespace: mlflow
    ownerReferences:
    - apiVersion: apps/v1
      blockOwnerDeletion: true
      controller: true
      kind: Deployment
      name: pgo
      uid: 0e34d166-37e7-4455-a2ab-d0fe97cf273f
    resourceVersion: "4745345"
    uid: 217696f3-ba59-4a7a-a825-4d84c0a6f15c
  spec:
    replicas: 1
    selector:
      matchLabels:
        pod-template-hash: 676bf9558c
        postgres-operator.crunchydata.com/control-plane: postgres-operator
    template:
      metadata:
        annotations:
          alm-examples: |-
            [
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "CrunchyBridgeCluster",
                "metadata": {
                  "name": "example-crunchybridgecluster"
                },
                "spec": {
                  "clusterName": "example-bridge-cluster",
                  "isHa": false,
                  "majorVersion": 16,
                  "plan": "standard-4",
                  "provider": "aws",
                  "region": "us-west-2",
                  "secret": "crunchy-bridge-api-key",
                  "storage": "10Gi"
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PGAdmin",
                "metadata": {
                  "name": "example-pgadmin",
                  "namespace": "openshift-operators"
                },
                "spec": {
                  "dataVolumeClaimSpec": {
                    "accessModes": [
                      "ReadWriteOnce"
                    ],
                    "resources": {
                      "requests": {
                        "storage": "1Gi"
                      }
                    }
                  },
                  "serverGroups": [
                    {
                      "name": "Crunchy Postgres for Kubernetes",
                      "postgresClusterSelector": {}
                    }
                  ]
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PGUpgrade",
                "metadata": {
                  "name": "example-upgrade"
                },
                "spec": {
                  "fromPostgresVersion": 16,
                  "postgresClusterName": "example",
                  "toPostgresVersion": 17
                }
              },
              {
                "apiVersion": "postgres-operator.crunchydata.com/v1beta1",
                "kind": "PostgresCluster",
                "metadata": {
                  "name": "example"
                },
                "spec": {
                  "backups": {
                    "pgbackrest": {
                      "repos": [
                        {
                          "name": "repo1",
                          "volume": {
                            "volumeClaimSpec": {
                              "accessModes": [
                                "ReadWriteOnce"
                              ],
                              "resources": {
                                "requests": {
                                  "storage": "1Gi"
                                }
                              }
                            }
                          }
                        }
                      ]
                    }
                  },
                  "instances": [
                    {
                      "dataVolumeClaimSpec": {
                        "accessModes": [
                          "ReadWriteOnce"
                        ],
                        "resources": {
                          "requests": {
                            "storage": "1Gi"
                          }
                        }
                      },
                      "replicas": 1
                    }
                  ],
                  "postgresVersion": 16
                }
              }
            ]
          capabilities: Auto Pilot
          categories: Database
          containerImage: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          createdAt: 2019-12-31 19:40Z
          description: Production Postgres Made Easy
          features.operators.openshift.io/cnf: "false"
          features.operators.openshift.io/cni: "false"
          features.operators.openshift.io/csi: "false"
          features.operators.openshift.io/disconnected: "false"
          features.operators.openshift.io/fips-compliant: "false"
          features.operators.openshift.io/proxy-aware: "false"
          features.operators.openshift.io/tls-profiles: "false"
          features.operators.openshift.io/token-auth-aws: "false"
          features.operators.openshift.io/token-auth-azure: "false"
          features.operators.openshift.io/token-auth-gcp: "false"
          olm.operatorGroup: mlflow-g2qsn
          olm.operatorNamespace: mlflow
          olm.targetNamespaces: mlflow
          operatorframework.io/properties: '{"properties":[{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"CrunchyBridgeCluster","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGAdmin","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PGUpgrade","version":"v1beta1"}},{"type":"olm.gvk","value":{"group":"postgres-operator.crunchydata.com","kind":"PostgresCluster","version":"v1beta1"}},{"type":"olm.package","value":{"packageName":"postgresql","version":"5.8.2"}}]}'
          repository: https://github.com/CrunchyData/postgres-operator
          support: crunchydata.com
        creationTimestamp: null
        labels:
          pod-template-hash: 676bf9558c
          postgres-operator.crunchydata.com/control-plane: postgres-operator
      spec:
        containers:
        - env:
          - name: REGISTRATION_REQUIRED
            value: "true"
          - name: TOKEN_PATH
            value: /etc/cpk/cpk_token
          - name: REGISTRATION_URL
            value: https://access.crunchydata.com/register-cpk
          - name: RSA_KEY
            value: |-
              -----BEGIN PUBLIC KEY-----
              MIICIjANBgkqhkiG9w0BAQEFAAOCAg8AMIICCgKCAgEA0JWaCc/F+/uV5zJQ7ryN
              uzvO+oGgT7z9uXm11qtKae86H3Z3W4qX+gGPs5LrFg444yDRMLqKzPLwuS2yc4mz
              QxtVbJyBZijbEDVd/knycj6MxFdBkbjxeGeWYT8nuZf4jBnWB48/O+uUnCbIYt8Q
              hUtyJ+KMIXkxrOd4mOgL6dQSCEAIcxBh10ZAucDQIgCn2BrD595uPrvlrrioV/Nq
              P0w0qIaKS785YU75qM4rT8tGeWVMEGst4AaRwfV7ZdVe065TP0hjd9sv8iJkr7En
              /Zym1NXcKbpwoeT3X9E7cVSARPFhZU1mmtL56wq3QLeFxef9TmVva1/Io0mKn4ah
              Uly5jgOpazrXliKJUoOurfMOakkHWfqSd5EfmRTh5nBcNqxtytLdiH0WlCkPSm+Z
              Ue3aY91YwcRnFhImLpbQYD5aVLAryzu+IdfRJa+zcZYSK0N8n9irg6jSrQZBct7z
              OagHUc0n/ZDP/BO8m0jlpJ7jH+N31Z5qFoNSaxf5H1Y/CwByXtzHJ1k2LleYsr9k
              k40nMY4l+SXCe4PmW4zW9uP3ItBWKEI2jFrRJgowQvL0MwtzDhbX9qg4+L9eBFpK
              jpHXr2kgLu4srIyXH6JO5UmE/62mHZh0SuqtOT1GQqWde5RjZyidYkwkAHup/AqA
              P0TPL/poQ6yvI9a0i22TCpcCAwEAAQ==
              -----END PUBLIC KEY-----
          - name: PGO_TARGET_NAMESPACES
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations['olm.targetNamespaces']
          - name: PGO_NAMESPACE
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.namespace
          - name: CRUNCHY_DEBUG
            value: "true"
          - name: PGO_INSTALLER
            value: olm
          - name: PGO_INSTALLER_ORIGIN
            value: operatorhub-community
          - name: PGO_CONTROLLER_LEASE_NAME
            value: cpk-leader-election-lease
          - name: RELATED_IMAGE_POSTGRES_16
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          - name: RELATED_IMAGE_POSTGRES_17
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-17.5-2520
          - name: RELATED_IMAGE_POSTGRES_16_GIS_3.3
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.3-2520
          - name: RELATED_IMAGE_POSTGRES_16_GIS_3.4
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-16.9-3.4-2520
          - name: RELATED_IMAGE_POSTGRES_17_GIS_3.4
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.4-2520
          - name: RELATED_IMAGE_POSTGRES_17_GIS_3.5
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-gis:ubi9-17.5-3.5-2520
          - name: RELATED_IMAGE_PGBACKREST
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          - name: RELATED_IMAGE_PGBOUNCER
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgbouncer:ubi9-1.24-2520
          - name: RELATED_IMAGE_PGEXPORTER
            value: registry.developers.crunchydata.com/crunchydata/crunchy-postgres-exporter:ubi9-0.17.1-2520
          - name: RELATED_IMAGE_PGUPGRADE
            value: registry.developers.crunchydata.com/crunchydata/crunchy-upgrade:ubi9-17.5-2520
          - name: RELATED_IMAGE_STANDALONE_PGADMIN
            value: registry.developers.crunchydata.com/crunchydata/crunchy-pgadmin4:ubi9-9.2-2520
          - name: RELATED_IMAGE_COLLECTOR
            value: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          - name: OPERATOR_CONDITION_NAME
            value: postgresoperator.v5.8.2
          image: registry.developers.crunchydata.com/crunchydata/postgres-operator:ubi9-5.8.2-0
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /readyz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 15
            periodSeconds: 20
            successThreshold: 1
            timeoutSeconds: 1
          name: operator
          ports:
          - containerPort: 8443
            name: metrics
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /healthz
              port: 8081
              scheme: HTTP
            initialDelaySeconds: 5
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/cpk
            name: cpk-registration-volume
        dnsPolicy: ClusterFirst
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext: {}
        serviceAccount: pgo
        serviceAccountName: pgo
        terminationGracePeriodSeconds: 30
        volumes:
        - name: cpk-registration-volume
          secret:
            defaultMode: 420
            optional: true
            secretName: cpk-registration
  status:
    availableReplicas: 1
    fullyLabeledReplicas: 1
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2025-07-17T18:15:05Z"
    generation: 1
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: postgres
      postgres-operator.crunchydata.com/instance: mlflow-server-instance1-rd4g
      postgres-operator.crunchydata.com/instance-set: instance1
    name: mlflow-server-instance1-rd4g
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4753192"
    uid: 729ae696-0a32-4f05-9f4a-9d1eb5fdfd65
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 0
    selector:
      matchLabels:
        postgres-operator.crunchydata.com/cluster: mlflow-server
        postgres-operator.crunchydata.com/instance: mlflow-server-instance1-rd4g
        postgres-operator.crunchydata.com/instance-set: instance1
    serviceName: mlflow-server-pods
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: database
        creationTimestamp: null
        labels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/data: postgres
          postgres-operator.crunchydata.com/instance: mlflow-server-instance1-rd4g
          postgres-operator.crunchydata.com/instance-set: instance1
          postgres-operator.crunchydata.com/patroni: mlflow-server-ha
      spec:
        containers:
        - command:
          - patroni
          - /etc/patroni
          env:
          - name: PGDATA
            value: /pgdata/pg16
          - name: PGHOST
            value: /tmp/postgres
          - name: PGPORT
            value: "5432"
          - name: KRB5_CONFIG
            value: /etc/postgres/krb5.conf
          - name: KRB5RCACHEDIR
            value: /tmp
          - name: LDAPTLS_CACERT
            value: /etc/postgres/ldap/ca.crt
          - name: PATRONI_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: PATRONI_KUBERNETES_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PATRONI_KUBERNETES_PORTS
            value: |
              - name: postgres
                port: 5432
                protocol: TCP
          - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
            value: $(PATRONI_NAME).mlflow-server-pods:5432
          - name: PATRONI_POSTGRESQL_LISTEN
            value: '*:5432'
          - name: PATRONI_POSTGRESQL_CONFIG_DIR
            value: /pgdata/pg16
          - name: PATRONI_POSTGRESQL_DATA_DIR
            value: /pgdata/pg16
          - name: PATRONI_RESTAPI_CONNECT_ADDRESS
            value: $(PATRONI_NAME).mlflow-server-pods:8008
          - name: PATRONI_RESTAPI_LISTEN
            value: '*:8008'
          - name: PATRONICTL_CONFIG_FILE
            value: /etc/patroni
          - name: LD_PRELOAD
            value: /usr/lib64/libnss_wrapper.so
          - name: NSS_WRAPPER_PASSWD
            value: /tmp/nss_wrapper/postgres/passwd
          - name: NSS_WRAPPER_GROUP
            value: /tmp/nss_wrapper/postgres/group
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 8008
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: database
          ports:
          - containerPort: 5432
            name: postgres
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8008
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /etc/database-containerinfo
            name: database-containerinfo
            readOnly: true
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /etc/patroni
            name: patroni-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
          - mountPath: /dev/shm
            name: dshm
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            # Parameters for curl when managing autogrow annotation.
            APISERVER="https://kubernetes.default.svc"
            SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
            NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
            TOKEN=$(cat ${SERVICEACCOUNT}/token)
            CACERT=${SERVICEACCOUNT}/ca.crt

            declare -r directory="/pgconf/tls"
            exec {fd}<> <(:||:)
            while read -r -t 5 -u "${fd}" ||:; do
              # Manage replication certificate.
              if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] &&
                install -D --mode=0600 -t "/tmp/replication" "${directory}"/{replication/tls.crt,replication/tls.key,replication/ca.crt} &&
                pkill -HUP --exact --parent=1 postgres
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded certificates dated %y' "${directory}"
              fi

              # Manage autogrow annotation.
              # Return size in Mebibytes.
              size=$(df --human-readable --block-size=M /pgdata | awk 'FNR == 2 {print $2}')
              use=$(df --human-readable /pgdata | awk 'FNR == 2 {print $5}')
              sizeInt="${size//M/}"
              # Use the sed punctuation class, because the shell will not accept the percent sign in an expansion.
              useInt=$(echo $use | sed 's/[[:punct:]]//g')
              triggerExpansion="$((useInt > 75))"
              if [ $triggerExpansion -eq 1 ]; then
                newSize="$(((sizeInt / 2)+sizeInt))"
                newSizeMi="${newSize}Mi"
                d='[{"op": "add", "path": "/metadata/annotations/suggested-pgdata-pvc-size", "value": "'"$newSizeMi"'"}]'
                curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -XPATCH "${APISERVER}/api/v1/namespaces/${NAMESPACE}/pods/${HOSTNAME}?fieldManager=kubectl-annotate" -H "Content-Type: application/json-patch+json" --data "$d"
              fi
            done
            }; export -f monitor; exec -a "$0" bash -ceu monitor
          - replication-cert-copy
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: replication-cert-copy
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /tmp
            name: tmp
        - command:
          - pgbackrest
          - server
          env:
          - name: LD_PRELOAD
            value: /usr/lib64/libnss_wrapper.so
          - name: NSS_WRAPPER_PASSWD
            value: /tmp/nss_wrapper/postgres/passwd
          - name: NSS_WRAPPER_GROUP
            value: /tmp/nss_wrapper/postgres/group
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - pgbackrest
              - server-ping
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: pgbackrest
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            exec {fd}<> <(:||:)
            until read -r -t 5 -u "${fd}"; do
              if
                [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --dereference --format='Loaded configuration dated %y' "${filename}"
              elif
                { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
                  [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
                } &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded certificates dated %y' "${directory}"
              fi
            done
            }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
          - pgbackrest-config
          - /etc/pgbackrest/server
          - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
          - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: pgbackrest-config
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        initContainers:
        - command:
          - bash
          - -ceu
          - --
          - |-
            declare -r expected_major_version="$1" pgwal_directory="$2"
            permissions() { while [[ -n "$1" ]]; do set "${1%/*}" "$@"; done; shift; stat -Lc '%A %4u %4g %n' "$@"; }
            halt() { local rc=$?; >&2 echo "$@"; exit "${rc/#0/1}"; }
            results() { printf '::postgres-operator: %s::%s\n' "$@"; }
            recreate() (
              local tmp; tmp=$(mktemp -d -p "${1%/*}"); GLOBIGNORE='.:..'; set -x
              chmod "$2" "${tmp}"; mv "$1"/* "${tmp}"; rmdir "$1"; mv "${tmp}" "$1"
            )
            safelink() (
              local desired="$1" name="$2" current
              current=$(realpath "${name}")
              if [[ "${current}" == "${desired}" ]]; then return; fi
              set -x; mv --no-target-directory "${current}" "${desired}"
              ln --no-dereference --force --symbolic "${desired}" "${name}"
            )
            echo Initializing ...
            results 'uid' "$(id -u ||:)" 'gid' "$(id -G ||:)"
            if [[ "${pgwal_directory}" == *"pgwal/"* ]] && [[ ! -d "/pgwal/pgbackrest-spool" ]];then rm -rf "/pgdata/pgbackrest-spool" && mkdir -p "/pgwal/pgbackrest-spool" && ln --force --symbolic "/pgwal/pgbackrest-spool" "/pgdata/pgbackrest-spool";fi
            if [[ ! -e "/pgdata/pgbackrest-spool" ]];then rm -rf /pgdata/pgbackrest-spool;fi
            results 'postgres path' "$(command -v postgres ||:)"
            results 'postgres version' "${postgres_version:=$(postgres --version ||:)}"
            [[ "${postgres_version}" =~ ") ${expected_major_version}"($|[^0-9]) ]] ||
            halt Expected PostgreSQL version "${expected_major_version}"
            results 'config directory' "${PGDATA:?}"
            postgres_data_directory=$([[ -d "${PGDATA}" ]] && postgres -C data_directory || echo "${PGDATA}")
            results 'data directory' "${postgres_data_directory}"
            [[ "${postgres_data_directory}" == "${PGDATA}" ]] ||
            halt Expected matching config and data directories
            bootstrap_dir="${postgres_data_directory}_bootstrap"
            [[ -d "${bootstrap_dir}" ]] && results 'bootstrap directory' "${bootstrap_dir}"
            [[ -d "${bootstrap_dir}" ]] && postgres_data_directory="${bootstrap_dir}"
            if [[ ! -e "${postgres_data_directory}" || -O "${postgres_data_directory}" ]]; then
            install --directory --mode=0700 "${postgres_data_directory}"
            elif [[ -w "${postgres_data_directory}" && -g "${postgres_data_directory}" ]]; then
            recreate "${postgres_data_directory}" '0700'
            else (halt Permissions!); fi ||
            halt "$(permissions "${postgres_data_directory}" ||:)"
            (mkdir -p '/pgdata/pgbackrest/log' && { chmod 0775 '/pgdata/pgbackrest/log' '/pgdata/pgbackrest' || :; }) ||
            halt "$(permissions /pgdata/pgbackrest/log ||:)"
            (mkdir -p '/pgdata/patroni/log' && { chmod 0775 '/pgdata/patroni/log' '/pgdata/patroni' || :; }) ||
            halt "$(permissions /pgdata/patroni/log ||:)"
            (mkdir -p '/pgdata/logs/postgres' && { chmod 0775 '/pgdata/logs/postgres' '/pgdata/logs' || :; }) ||
            halt "$(permissions /pgdata/logs/postgres ||:)"
            install -D --mode=0600 -t "/tmp/replication" "/pgconf/tls/replication"/{tls.crt,tls.key,ca.crt}


            [[ -f "${postgres_data_directory}/PG_VERSION" ]] || exit 0
            results 'data version' "${postgres_data_version:=$(< "${postgres_data_directory}/PG_VERSION")}"
            [[ "${postgres_data_version}" == "${expected_major_version}" ]] ||
            halt Expected PostgreSQL data version "${expected_major_version}"
            [[ ! -f "${postgres_data_directory}/postgresql.conf" ]] &&
            touch "${postgres_data_directory}/postgresql.conf"
            safelink "${pgwal_directory}" "${postgres_data_directory}/pg_wal"
            results 'wal directory' "$(realpath "${postgres_data_directory}/pg_wal" ||:)"
            rm -f "${postgres_data_directory}/recovery.signal"
          - startup
          - "16"
          - /pgdata/pg16_wal
          env:
          - name: PGDATA
            value: /pgdata/pg16
          - name: PGHOST
            value: /tmp/postgres
          - name: PGPORT
            value: "5432"
          - name: KRB5_CONFIG
            value: /etc/postgres/krb5.conf
          - name: KRB5RCACHEDIR
            value: /tmp
          - name: LDAPTLS_CACERT
            value: /etc/postgres/ldap/ca.crt
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: postgres-startup
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -c
          - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
            \n# Define nss_wrapper directory and passwd & group files that will be
            utilized by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also
            sets these vars) isn't sourced here since the nss_wrapper\n# has not yet
            been setup, and we therefore don't yet want the nss_wrapper vars in the
            environment.\nmkdir -p /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
            create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n#
            grab the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
            -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[
            -f \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
            -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
            if the username is missing from the passwd file, then add it\nif [[ !
            $(cat \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
            ]]; then\n    echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
            \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
            with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
            \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
            >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
            \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
            if the username (which will be the same as the group name) is missing
            from group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\")
            =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n    echo \"nss_wrapper:
            adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n    cp
            \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
            >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
            \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
            export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
            & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
            LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
            NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
            configured\"\n"
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: nss-wrapper-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        serviceAccount: mlflow-server-instance
        serviceAccountName: mlflow-server-instance
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: cert-volume
          projected:
            defaultMode: 384
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: tls.crt
                - key: tls.key
                  path: tls.key
                - key: ca.crt
                  path: ca.crt
                name: mlflow-server-cluster-cert
            - secret:
                items:
                - key: tls.crt
                  path: replication/tls.crt
                - key: tls.key
                  path: replication/tls.key
                - key: ca.crt
                  path: replication/ca.crt
                name: mlflow-server-replication-cert
        - name: postgres-data
          persistentVolumeClaim:
            claimName: mlflow-server-instance1-rd4g-pgdata
        - downwardAPI:
            defaultMode: 420
            items:
            - path: cpu_limit
              resourceFieldRef:
                containerName: database
                divisor: 1m
                resource: limits.cpu
            - path: cpu_request
              resourceFieldRef:
                containerName: database
                divisor: 1m
                resource: requests.cpu
            - path: mem_limit
              resourceFieldRef:
                containerName: database
                divisor: 1Mi
                resource: limits.memory
            - path: mem_request
              resourceFieldRef:
                containerName: database
                divisor: 1Mi
                resource: requests.memory
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: database-containerinfo
        - name: pgbackrest-server
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: pgbackrest-server.crt
                  path: server-tls.crt
                - key: pgbackrest-server.key
                  mode: 384
                  path: server-tls.key
                name: mlflow-server-instance1-rd4g-certs
        - name: pgbackrest-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbackrest_instance.conf
                  path: pgbackrest_instance.conf
                - key: config-hash
                  path: config-hash
                - key: pgbackrest-server.conf
                  path: ~postgres-operator_server.conf
                name: mlflow-server-pgbackrest-config
            - secret:
                items:
                - key: pgbackrest.ca-roots
                  path: ~postgres-operator/tls-ca.crt
                - key: pgbackrest-client.crt
                  path: ~postgres-operator/client-tls.crt
                - key: pgbackrest-client.key
                  mode: 384
                  path: ~postgres-operator/client-tls.key
                name: mlflow-server-pgbackrest
        - name: patroni-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: patroni.yaml
                  path: ~postgres-operator_cluster.yaml
                name: mlflow-server-config
            - configMap:
                items:
                - key: patroni.yaml
                  path: ~postgres-operator_instance.yaml
                name: mlflow-server-instance1-rd4g-config
            - secret:
                items:
                - key: patroni.ca-roots
                  path: ~postgres-operator/patroni.ca-roots
                - key: patroni.crt-combined
                  path: ~postgres-operator/patroni.crt+key
                name: mlflow-server-instance1-rd4g-certs
        - emptyDir:
            sizeLimit: 16Mi
          name: tmp
        - emptyDir:
            medium: Memory
          name: dshm
    updateStrategy:
      type: OnDelete
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: mlflow-server-instance1-rd4g-776d966789
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: mlflow-server-instance1-rd4g-776d966789
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    creationTimestamp: "2025-07-17T18:15:05Z"
    generation: 1
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: postgres
      postgres-operator.crunchydata.com/instance: mlflow-server-instance1-vj2j
      postgres-operator.crunchydata.com/instance-set: instance1
    name: mlflow-server-instance1-vj2j
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4756933"
    uid: 472b434f-3fcb-4223-acda-aa7ae4be970e
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: OrderedReady
    replicas: 1
    revisionHistoryLimit: 0
    selector:
      matchLabels:
        postgres-operator.crunchydata.com/cluster: mlflow-server
        postgres-operator.crunchydata.com/instance: mlflow-server-instance1-vj2j
        postgres-operator.crunchydata.com/instance-set: instance1
    serviceName: mlflow-server-pods
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: database
        creationTimestamp: null
        labels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/data: postgres
          postgres-operator.crunchydata.com/instance: mlflow-server-instance1-vj2j
          postgres-operator.crunchydata.com/instance-set: instance1
          postgres-operator.crunchydata.com/patroni: mlflow-server-ha
      spec:
        containers:
        - command:
          - patroni
          - /etc/patroni
          env:
          - name: PGDATA
            value: /pgdata/pg16
          - name: PGHOST
            value: /tmp/postgres
          - name: PGPORT
            value: "5432"
          - name: KRB5_CONFIG
            value: /etc/postgres/krb5.conf
          - name: KRB5RCACHEDIR
            value: /tmp
          - name: LDAPTLS_CACERT
            value: /etc/postgres/ldap/ca.crt
          - name: PATRONI_NAME
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: metadata.name
          - name: PATRONI_KUBERNETES_POD_IP
            valueFrom:
              fieldRef:
                apiVersion: v1
                fieldPath: status.podIP
          - name: PATRONI_KUBERNETES_PORTS
            value: |
              - name: postgres
                port: 5432
                protocol: TCP
          - name: PATRONI_POSTGRESQL_CONNECT_ADDRESS
            value: $(PATRONI_NAME).mlflow-server-pods:5432
          - name: PATRONI_POSTGRESQL_LISTEN
            value: '*:5432'
          - name: PATRONI_POSTGRESQL_CONFIG_DIR
            value: /pgdata/pg16
          - name: PATRONI_POSTGRESQL_DATA_DIR
            value: /pgdata/pg16
          - name: PATRONI_RESTAPI_CONNECT_ADDRESS
            value: $(PATRONI_NAME).mlflow-server-pods:8008
          - name: PATRONI_RESTAPI_LISTEN
            value: '*:8008'
          - name: PATRONICTL_CONFIG_FILE
            value: /etc/patroni
          - name: LD_PRELOAD
            value: /usr/lib64/libnss_wrapper.so
          - name: NSS_WRAPPER_PASSWD
            value: /tmp/nss_wrapper/postgres/passwd
          - name: NSS_WRAPPER_GROUP
            value: /tmp/nss_wrapper/postgres/group
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          livenessProbe:
            failureThreshold: 3
            httpGet:
              path: /liveness
              port: 8008
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          name: database
          ports:
          - containerPort: 5432
            name: postgres
            protocol: TCP
          readinessProbe:
            failureThreshold: 3
            httpGet:
              path: /readiness
              port: 8008
              scheme: HTTPS
            initialDelaySeconds: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 5
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /etc/database-containerinfo
            name: database-containerinfo
            readOnly: true
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /etc/patroni
            name: patroni-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
          - mountPath: /dev/shm
            name: dshm
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            # Parameters for curl when managing autogrow annotation.
            APISERVER="https://kubernetes.default.svc"
            SERVICEACCOUNT="/var/run/secrets/kubernetes.io/serviceaccount"
            NAMESPACE=$(cat ${SERVICEACCOUNT}/namespace)
            TOKEN=$(cat ${SERVICEACCOUNT}/token)
            CACERT=${SERVICEACCOUNT}/ca.crt

            declare -r directory="/pgconf/tls"
            exec {fd}<> <(:||:)
            while read -r -t 5 -u "${fd}" ||:; do
              # Manage replication certificate.
              if [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] &&
                install -D --mode=0600 -t "/tmp/replication" "${directory}"/{replication/tls.crt,replication/tls.key,replication/ca.crt} &&
                pkill -HUP --exact --parent=1 postgres
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded certificates dated %y' "${directory}"
              fi

              # Manage autogrow annotation.
              # Return size in Mebibytes.
              size=$(df --human-readable --block-size=M /pgdata | awk 'FNR == 2 {print $2}')
              use=$(df --human-readable /pgdata | awk 'FNR == 2 {print $5}')
              sizeInt="${size//M/}"
              # Use the sed punctuation class, because the shell will not accept the percent sign in an expansion.
              useInt=$(echo $use | sed 's/[[:punct:]]//g')
              triggerExpansion="$((useInt > 75))"
              if [ $triggerExpansion -eq 1 ]; then
                newSize="$(((sizeInt / 2)+sizeInt))"
                newSizeMi="${newSize}Mi"
                d='[{"op": "add", "path": "/metadata/annotations/suggested-pgdata-pvc-size", "value": "'"$newSizeMi"'"}]'
                curl --cacert ${CACERT} --header "Authorization: Bearer ${TOKEN}" -XPATCH "${APISERVER}/api/v1/namespaces/${NAMESPACE}/pods/${HOSTNAME}?fieldManager=kubectl-annotate" -H "Content-Type: application/json-patch+json" --data "$d"
              fi
            done
            }; export -f monitor; exec -a "$0" bash -ceu monitor
          - replication-cert-copy
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: replication-cert-copy
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /tmp
            name: tmp
        - command:
          - pgbackrest
          - server
          env:
          - name: LD_PRELOAD
            value: /usr/lib64/libnss_wrapper.so
          - name: NSS_WRAPPER_PASSWD
            value: /tmp/nss_wrapper/postgres/passwd
          - name: NSS_WRAPPER_GROUP
            value: /tmp/nss_wrapper/postgres/group
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - pgbackrest
              - server-ping
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: pgbackrest
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            exec {fd}<> <(:||:)
            until read -r -t 5 -u "${fd}"; do
              if
                [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --dereference --format='Loaded configuration dated %y' "${filename}"
              elif
                { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
                  [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
                } &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded certificates dated %y' "${directory}"
              fi
            done
            }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
          - pgbackrest-config
          - /etc/pgbackrest/server
          - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
          - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: pgbackrest-config
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        initContainers:
        - command:
          - bash
          - -ceu
          - --
          - |-
            declare -r expected_major_version="$1" pgwal_directory="$2"
            permissions() { while [[ -n "$1" ]]; do set "${1%/*}" "$@"; done; shift; stat -Lc '%A %4u %4g %n' "$@"; }
            halt() { local rc=$?; >&2 echo "$@"; exit "${rc/#0/1}"; }
            results() { printf '::postgres-operator: %s::%s\n' "$@"; }
            recreate() (
              local tmp; tmp=$(mktemp -d -p "${1%/*}"); GLOBIGNORE='.:..'; set -x
              chmod "$2" "${tmp}"; mv "$1"/* "${tmp}"; rmdir "$1"; mv "${tmp}" "$1"
            )
            safelink() (
              local desired="$1" name="$2" current
              current=$(realpath "${name}")
              if [[ "${current}" == "${desired}" ]]; then return; fi
              set -x; mv --no-target-directory "${current}" "${desired}"
              ln --no-dereference --force --symbolic "${desired}" "${name}"
            )
            echo Initializing ...
            results 'uid' "$(id -u ||:)" 'gid' "$(id -G ||:)"
            if [[ "${pgwal_directory}" == *"pgwal/"* ]] && [[ ! -d "/pgwal/pgbackrest-spool" ]];then rm -rf "/pgdata/pgbackrest-spool" && mkdir -p "/pgwal/pgbackrest-spool" && ln --force --symbolic "/pgwal/pgbackrest-spool" "/pgdata/pgbackrest-spool";fi
            if [[ ! -e "/pgdata/pgbackrest-spool" ]];then rm -rf /pgdata/pgbackrest-spool;fi
            results 'postgres path' "$(command -v postgres ||:)"
            results 'postgres version' "${postgres_version:=$(postgres --version ||:)}"
            [[ "${postgres_version}" =~ ") ${expected_major_version}"($|[^0-9]) ]] ||
            halt Expected PostgreSQL version "${expected_major_version}"
            results 'config directory' "${PGDATA:?}"
            postgres_data_directory=$([[ -d "${PGDATA}" ]] && postgres -C data_directory || echo "${PGDATA}")
            results 'data directory' "${postgres_data_directory}"
            [[ "${postgres_data_directory}" == "${PGDATA}" ]] ||
            halt Expected matching config and data directories
            bootstrap_dir="${postgres_data_directory}_bootstrap"
            [[ -d "${bootstrap_dir}" ]] && results 'bootstrap directory' "${bootstrap_dir}"
            [[ -d "${bootstrap_dir}" ]] && postgres_data_directory="${bootstrap_dir}"
            if [[ ! -e "${postgres_data_directory}" || -O "${postgres_data_directory}" ]]; then
            install --directory --mode=0700 "${postgres_data_directory}"
            elif [[ -w "${postgres_data_directory}" && -g "${postgres_data_directory}" ]]; then
            recreate "${postgres_data_directory}" '0700'
            else (halt Permissions!); fi ||
            halt "$(permissions "${postgres_data_directory}" ||:)"
            (mkdir -p '/pgdata/pgbackrest/log' && { chmod 0775 '/pgdata/pgbackrest/log' '/pgdata/pgbackrest' || :; }) ||
            halt "$(permissions /pgdata/pgbackrest/log ||:)"
            (mkdir -p '/pgdata/patroni/log' && { chmod 0775 '/pgdata/patroni/log' '/pgdata/patroni' || :; }) ||
            halt "$(permissions /pgdata/patroni/log ||:)"
            (mkdir -p '/pgdata/logs/postgres' && { chmod 0775 '/pgdata/logs/postgres' '/pgdata/logs' || :; }) ||
            halt "$(permissions /pgdata/logs/postgres ||:)"
            install -D --mode=0600 -t "/tmp/replication" "/pgconf/tls/replication"/{tls.crt,tls.key,ca.crt}


            [[ -f "${postgres_data_directory}/PG_VERSION" ]] || exit 0
            results 'data version' "${postgres_data_version:=$(< "${postgres_data_directory}/PG_VERSION")}"
            [[ "${postgres_data_version}" == "${expected_major_version}" ]] ||
            halt Expected PostgreSQL data version "${expected_major_version}"
            [[ ! -f "${postgres_data_directory}/postgresql.conf" ]] &&
            touch "${postgres_data_directory}/postgresql.conf"
            safelink "${pgwal_directory}" "${postgres_data_directory}/pg_wal"
            results 'wal directory' "$(realpath "${postgres_data_directory}/pg_wal" ||:)"
            rm -f "${postgres_data_directory}/recovery.signal"
          - startup
          - "16"
          - /pgdata/pg16_wal
          env:
          - name: PGDATA
            value: /pgdata/pg16
          - name: PGHOST
            value: /tmp/postgres
          - name: PGPORT
            value: "5432"
          - name: KRB5_CONFIG
            value: /etc/postgres/krb5.conf
          - name: KRB5RCACHEDIR
            value: /tmp
          - name: LDAPTLS_CACERT
            value: /etc/postgres/ldap/ca.crt
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: postgres-startup
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgconf/tls
            name: cert-volume
            readOnly: true
          - mountPath: /pgdata
            name: postgres-data
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -c
          - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
            \n# Define nss_wrapper directory and passwd & group files that will be
            utilized by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also
            sets these vars) isn't sourced here since the nss_wrapper\n# has not yet
            been setup, and we therefore don't yet want the nss_wrapper vars in the
            environment.\nmkdir -p /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
            create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n#
            grab the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
            -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[
            -f \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
            -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
            if the username is missing from the passwd file, then add it\nif [[ !
            $(cat \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
            ]]; then\n    echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
            \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
            with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
            \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
            >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
            \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
            if the username (which will be the same as the group name) is missing
            from group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\")
            =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n    echo \"nss_wrapper:
            adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n    cp
            \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
            >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
            \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
            export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
            & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
            LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
            NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
            configured\"\n"
          image: registry.developers.crunchydata.com/crunchydata/crunchy-postgres:ubi9-16.9-2520
          imagePullPolicy: IfNotPresent
          name: nss-wrapper-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        serviceAccount: mlflow-server-instance
        serviceAccountName: mlflow-server-instance
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: cert-volume
          projected:
            defaultMode: 384
            sources:
            - secret:
                items:
                - key: tls.crt
                  path: tls.crt
                - key: tls.key
                  path: tls.key
                - key: ca.crt
                  path: ca.crt
                name: mlflow-server-cluster-cert
            - secret:
                items:
                - key: tls.crt
                  path: replication/tls.crt
                - key: tls.key
                  path: replication/tls.key
                - key: ca.crt
                  path: replication/ca.crt
                name: mlflow-server-replication-cert
        - name: postgres-data
          persistentVolumeClaim:
            claimName: mlflow-server-instance1-vj2j-pgdata
        - downwardAPI:
            defaultMode: 420
            items:
            - path: cpu_limit
              resourceFieldRef:
                containerName: database
                divisor: 1m
                resource: limits.cpu
            - path: cpu_request
              resourceFieldRef:
                containerName: database
                divisor: 1m
                resource: requests.cpu
            - path: mem_limit
              resourceFieldRef:
                containerName: database
                divisor: 1Mi
                resource: limits.memory
            - path: mem_request
              resourceFieldRef:
                containerName: database
                divisor: 1Mi
                resource: requests.memory
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.labels
              path: labels
            - fieldRef:
                apiVersion: v1
                fieldPath: metadata.annotations
              path: annotations
          name: database-containerinfo
        - name: pgbackrest-server
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: pgbackrest-server.crt
                  path: server-tls.crt
                - key: pgbackrest-server.key
                  mode: 384
                  path: server-tls.key
                name: mlflow-server-instance1-vj2j-certs
        - name: pgbackrest-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbackrest_instance.conf
                  path: pgbackrest_instance.conf
                - key: config-hash
                  path: config-hash
                - key: pgbackrest-server.conf
                  path: ~postgres-operator_server.conf
                name: mlflow-server-pgbackrest-config
            - secret:
                items:
                - key: pgbackrest.ca-roots
                  path: ~postgres-operator/tls-ca.crt
                - key: pgbackrest-client.crt
                  path: ~postgres-operator/client-tls.crt
                - key: pgbackrest-client.key
                  mode: 384
                  path: ~postgres-operator/client-tls.key
                name: mlflow-server-pgbackrest
        - name: patroni-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: patroni.yaml
                  path: ~postgres-operator_cluster.yaml
                name: mlflow-server-config
            - configMap:
                items:
                - key: patroni.yaml
                  path: ~postgres-operator_instance.yaml
                name: mlflow-server-instance1-vj2j-config
            - secret:
                items:
                - key: patroni.ca-roots
                  path: ~postgres-operator/patroni.ca-roots
                - key: patroni.crt-combined
                  path: ~postgres-operator/patroni.crt+key
                name: mlflow-server-instance1-vj2j-certs
        - emptyDir:
            sizeLimit: 16Mi
          name: tmp
        - emptyDir:
            medium: Memory
          name: dshm
    updateStrategy:
      type: OnDelete
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: mlflow-server-instance1-vj2j-7788d664bd
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: mlflow-server-instance1-vj2j-7788d664bd
    updatedReplicas: 1
- apiVersion: apps/v1
  kind: StatefulSet
  metadata:
    annotations:
      kubectl.kubernetes.io/default-container: pgbackrest
    creationTimestamp: "2025-07-17T18:15:05Z"
    generation: 1
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/data: pgbackrest
      postgres-operator.crunchydata.com/pgbackrest: ""
      postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
    name: mlflow-server-repo-host
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4752408"
    uid: 262ba152-e203-48e7-858b-ac5e26e74410
  spec:
    persistentVolumeClaimRetentionPolicy:
      whenDeleted: Retain
      whenScaled: Retain
    podManagementPolicy: Parallel
    replicas: 1
    revisionHistoryLimit: 10
    selector:
      matchLabels:
        postgres-operator.crunchydata.com/cluster: mlflow-server
        postgres-operator.crunchydata.com/pgbackrest: ""
        postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
    serviceName: mlflow-server-pods
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: pgbackrest
        creationTimestamp: null
        labels:
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/data: pgbackrest
          postgres-operator.crunchydata.com/pgbackrest: ""
          postgres-operator.crunchydata.com/pgbackrest-dedicated: ""
      spec:
        automountServiceAccountToken: false
        containers:
        - command:
          - pgbackrest
          - server
          env:
          - name: LD_PRELOAD
            value: /usr/lib64/libnss_wrapper.so
          - name: NSS_WRAPPER_PASSWD
            value: /tmp/nss_wrapper/postgres/passwd
          - name: NSS_WRAPPER_GROUP
            value: /tmp/nss_wrapper/postgres/group
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          livenessProbe:
            exec:
              command:
              - pgbackrest
              - server-ping
            failureThreshold: 3
            periodSeconds: 10
            successThreshold: 1
            timeoutSeconds: 1
          name: pgbackrest
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /pgbackrest/repo1
            name: repo1
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -ceu
          - --
          - |-
            monitor() {
            exec {fd}<> <(:||:)
            until read -r -t 5 -u "${fd}"; do
              if
                [[ "${filename}" -nt "/proc/self/fd/${fd}" ]] &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --dereference --format='Loaded configuration dated %y' "${filename}"
              elif
                { [[ "${directory}" -nt "/proc/self/fd/${fd}" ]] ||
                  [[ "${authority}" -nt "/proc/self/fd/${fd}" ]]
                } &&
                pkill -HUP --exact --parent=0 pgbackrest
              then
                exec {fd}>&- && exec {fd}<> <(:||:)
                stat --format='Loaded certificates dated %y' "${directory}"
              fi
            done
            }; export directory="$1" authority="$2" filename="$3"; export -f monitor; exec -a "$0" bash -ceu monitor
          - pgbackrest-config
          - /etc/pgbackrest/server
          - /etc/pgbackrest/conf.d/~postgres-operator/tls-ca.crt
          - /etc/pgbackrest/conf.d/~postgres-operator_server.conf
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: pgbackrest-config
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/server
            name: pgbackrest-server
            readOnly: true
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
          - mountPath: /tmp
            name: tmp
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        initContainers:
        - command:
          - bash
          - -c
          - mkdir -p '/pgbackrest/repo1/log' && { chmod 0775 '/pgbackrest/repo1/log'
            || :; }
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: pgbackrest-log-dir
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /pgbackrest/repo1
            name: repo1
          - mountPath: /tmp
            name: tmp
        - command:
          - bash
          - -c
          - "export NSS_WRAPPER_SUBDIR=postgres CRUNCHY_NSS_USERNAME=postgres CRUNCHY_NSS_USER_DESC=\"postgres\"
            \n# Define nss_wrapper directory and passwd & group files that will be
            utilized by nss_wrapper.  The\n# nss_wrapper_env.sh script (which also
            sets these vars) isn't sourced here since the nss_wrapper\n# has not yet
            been setup, and we therefore don't yet want the nss_wrapper vars in the
            environment.\nmkdir -p /tmp/nss_wrapper\nchmod g+rwx /tmp/nss_wrapper\n\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\n#
            create the nss_wrapper directory\nmkdir -p \"${NSS_WRAPPER_DIR}\"\n\n#
            grab the current user ID and group ID\nUSER_ID=$(id -u)\nexport USER_ID\nGROUP_ID=$(id
            -g)\nexport GROUP_ID\n\n# get copies of the passwd and group files\n[[
            -f \"${NSS_WRAPPER_PASSWD}\" ]] || cp \"/etc/passwd\" \"${NSS_WRAPPER_PASSWD}\"\n[[
            -f \"${NSS_WRAPPER_GROUP}\" ]] || cp \"/etc/group\" \"${NSS_WRAPPER_GROUP}\"\n\n#
            if the username is missing from the passwd file, then add it\nif [[ !
            $(cat \"${NSS_WRAPPER_PASSWD}\") =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID}
            ]]; then\n    echo \"nss_wrapper: adding user\"\n    passwd_tmp=\"${NSS_WRAPPER_DIR}/passwd_tmp\"\n
            \   cp \"${NSS_WRAPPER_PASSWD}\" \"${passwd_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${passwd_tmp}\"\n    # needed for OCP 4.x because crio updates /etc/passwd
            with an entry for USER_ID\n    sed -i \"/${USER_ID}:x:/d\" \"${passwd_tmp}\"\n
            \   printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${GROUP_ID}:${CRUNCHY_NSS_USER_DESC}:${HOME}:/bin/bash\\n'
            >> \"${passwd_tmp}\"\n    envsubst < \"${passwd_tmp}\" > \"${NSS_WRAPPER_PASSWD}\"\n
            \   rm \"${passwd_tmp}\"\nelse\n    echo \"nss_wrapper: user exists\"\nfi\n\n#
            if the username (which will be the same as the group name) is missing
            from group file, then add it\nif [[ ! $(cat \"${NSS_WRAPPER_GROUP}\")
            =~ ${CRUNCHY_NSS_USERNAME}:x:${USER_ID} ]]; then\n    echo \"nss_wrapper:
            adding group\"\n    group_tmp=\"${NSS_WRAPPER_DIR}/group_tmp\"\n    cp
            \"${NSS_WRAPPER_GROUP}\" \"${group_tmp}\"\n    sed -i \"/${CRUNCHY_NSS_USERNAME}:x:/d\"
            \"${group_tmp}\"\n    printf '${CRUNCHY_NSS_USERNAME}:x:${USER_ID}:${CRUNCHY_NSS_USERNAME}\\n'
            >> \"${group_tmp}\"\n    envsubst < \"${group_tmp}\" > \"${NSS_WRAPPER_GROUP}\"\n
            \   rm \"${group_tmp}\"\nelse\n    echo \"nss_wrapper: group exists\"\nfi\n\n#
            export the nss_wrapper env vars\n# define nss_wrapper directory and passwd
            & group files that will be utilized by nss_wrapper\nNSS_WRAPPER_DIR=\"/tmp/nss_wrapper/${NSS_WRAPPER_SUBDIR}\"\nNSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_DIR}/passwd\"\nNSS_WRAPPER_GROUP=\"${NSS_WRAPPER_DIR}/group\"\n\nexport
            LD_PRELOAD=/usr/lib64/libnss_wrapper.so\nexport NSS_WRAPPER_PASSWD=\"${NSS_WRAPPER_PASSWD}\"\nexport
            NSS_WRAPPER_GROUP=\"${NSS_WRAPPER_GROUP}\"\n\necho \"nss_wrapper: environment
            configured\"\n"
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: nss-wrapper-init
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /tmp
            name: tmp
        restartPolicy: Always
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        serviceAccount: mlflow-server-repohost
        serviceAccountName: mlflow-server-repohost
        shareProcessNamespace: true
        terminationGracePeriodSeconds: 30
        topologySpreadConstraints:
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: kubernetes.io/hostname
          whenUnsatisfiable: ScheduleAnyway
        - labelSelector:
            matchExpressions:
            - key: postgres-operator.crunchydata.com/data
              operator: In
              values:
              - postgres
              - pgbackrest
            matchLabels:
              postgres-operator.crunchydata.com/cluster: mlflow-server
          maxSkew: 1
          topologyKey: topology.kubernetes.io/zone
          whenUnsatisfiable: ScheduleAnyway
        volumes:
        - name: pgbackrest-server
          projected:
            defaultMode: 420
            sources:
            - secret:
                items:
                - key: pgbackrest-repo-host.crt
                  path: server-tls.crt
                - key: pgbackrest-repo-host.key
                  mode: 384
                  path: server-tls.key
                name: mlflow-server-pgbackrest
        - name: repo1
          persistentVolumeClaim:
            claimName: mlflow-server-repo1
        - name: pgbackrest-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbackrest_repo.conf
                  path: pgbackrest_repo.conf
                - key: config-hash
                  path: config-hash
                - key: pgbackrest-server.conf
                  path: ~postgres-operator_server.conf
                name: mlflow-server-pgbackrest-config
            - secret:
                items:
                - key: pgbackrest.ca-roots
                  path: ~postgres-operator/tls-ca.crt
                - key: pgbackrest-client.crt
                  path: ~postgres-operator/client-tls.crt
                - key: pgbackrest-client.key
                  mode: 384
                  path: ~postgres-operator/client-tls.key
                name: mlflow-server-pgbackrest
        - emptyDir:
            sizeLimit: 16Mi
          name: tmp
    updateStrategy:
      type: RollingUpdate
  status:
    availableReplicas: 1
    collisionCount: 0
    currentReplicas: 1
    currentRevision: mlflow-server-repo-host-586bf48bc5
    observedGeneration: 1
    readyReplicas: 1
    replicas: 1
    updateRevision: mlflow-server-repo-host-586bf48bc5
    updatedReplicas: 1
- apiVersion: batch/v1
  kind: Job
  metadata:
    annotations:
      kubectl.kubernetes.io/default-container: pgbackrest
      postgres-operator.crunchydata.com/pgbackrest-hash: 65bb57b6b5
    creationTimestamp: "2025-07-17T18:15:43Z"
    generation: 1
    labels:
      postgres-operator.crunchydata.com/cluster: mlflow-server
      postgres-operator.crunchydata.com/pgbackrest: ""
      postgres-operator.crunchydata.com/pgbackrest-backup: replica-create
      postgres-operator.crunchydata.com/pgbackrest-repo: repo1
    name: mlflow-server-backup-66bt
    namespace: mlflow
    ownerReferences:
    - apiVersion: postgres-operator.crunchydata.com/v1beta1
      blockOwnerDeletion: true
      controller: true
      kind: PostgresCluster
      name: mlflow-server
      uid: 92f88080-f976-4bba-9132-b2151df32d90
    resourceVersion: "4757303"
    uid: 3eff16ff-11b9-478e-8045-7a976a362b64
  spec:
    backoffLimit: 6
    completionMode: NonIndexed
    completions: 1
    manualSelector: false
    parallelism: 1
    podReplacementPolicy: TerminatingOrFailed
    selector:
      matchLabels:
        batch.kubernetes.io/controller-uid: 3eff16ff-11b9-478e-8045-7a976a362b64
    suspend: false
    template:
      metadata:
        annotations:
          kubectl.kubernetes.io/default-container: pgbackrest
          postgres-operator.crunchydata.com/pgbackrest-hash: 65bb57b6b5
        creationTimestamp: null
        labels:
          batch.kubernetes.io/controller-uid: 3eff16ff-11b9-478e-8045-7a976a362b64
          batch.kubernetes.io/job-name: mlflow-server-backup-66bt
          controller-uid: 3eff16ff-11b9-478e-8045-7a976a362b64
          job-name: mlflow-server-backup-66bt
          postgres-operator.crunchydata.com/cluster: mlflow-server
          postgres-operator.crunchydata.com/pgbackrest: ""
          postgres-operator.crunchydata.com/pgbackrest-backup: replica-create
          postgres-operator.crunchydata.com/pgbackrest-repo: repo1
      spec:
        containers:
        - command:
          - /opt/crunchy/bin/pgbackrest
          env:
          - name: COMMAND
            value: backup
          - name: COMMAND_OPTS
            value: --stanza=db --repo=1
          - name: COMPARE_HASH
            value: "true"
          - name: CONTAINER
            value: pgbackrest
          - name: NAMESPACE
            value: mlflow
          - name: SELECTOR
            value: postgres-operator.crunchydata.com/cluster=mlflow-server,postgres-operator.crunchydata.com/pgbackrest=,postgres-operator.crunchydata.com/pgbackrest-dedicated=
          image: registry.developers.crunchydata.com/crunchydata/crunchy-pgbackrest:ubi9-2.54.2-2520
          imagePullPolicy: IfNotPresent
          name: pgbackrest
          resources: {}
          securityContext:
            allowPrivilegeEscalation: false
            capabilities:
              drop:
              - ALL
            privileged: false
            readOnlyRootFilesystem: true
            runAsNonRoot: true
            seccompProfile:
              type: RuntimeDefault
          terminationMessagePath: /dev/termination-log
          terminationMessagePolicy: File
          volumeMounts:
          - mountPath: /etc/pgbackrest/conf.d
            name: pgbackrest-config
            readOnly: true
        dnsPolicy: ClusterFirst
        enableServiceLinks: false
        restartPolicy: Never
        schedulerName: default-scheduler
        securityContext:
          fsGroupChangePolicy: OnRootMismatch
        serviceAccount: mlflow-server-pgbackrest
        serviceAccountName: mlflow-server-pgbackrest
        terminationGracePeriodSeconds: 30
        volumes:
        - name: pgbackrest-config
          projected:
            defaultMode: 420
            sources:
            - configMap:
                items:
                - key: pgbackrest_repo.conf
                  path: pgbackrest_repo.conf
                - key: config-hash
                  path: config-hash
                - key: pgbackrest-server.conf
                  path: ~postgres-operator_server.conf
                name: mlflow-server-pgbackrest-config
            - secret:
                items:
                - key: pgbackrest.ca-roots
                  path: ~postgres-operator/tls-ca.crt
                - key: pgbackrest-client.crt
                  path: ~postgres-operator/client-tls.crt
                - key: pgbackrest-client.key
                  mode: 384
                  path: ~postgres-operator/client-tls.key
                name: mlflow-server-pgbackrest
  status:
    completionTime: "2025-07-17T18:18:05Z"
    conditions:
    - lastProbeTime: "2025-07-17T18:18:05Z"
      lastTransitionTime: "2025-07-17T18:18:05Z"
      message: Reached expected number of succeeded pods
      reason: CompletionsReached
      status: "True"
      type: SuccessCriteriaMet
    - lastProbeTime: "2025-07-17T18:18:05Z"
      lastTransitionTime: "2025-07-17T18:18:05Z"
      message: Reached expected number of succeeded pods
      reason: CompletionsReached
      status: "True"
      type: Complete
    ready: 0
    startTime: "2025-07-17T18:15:43Z"
    succeeded: 1
    terminating: 0
    uncountedTerminatedPods: {}
- apiVersion: route.openshift.io/v1
  kind: Route
  metadata:
    annotations:
      meta.helm.sh/release-name: mlflow-server
      meta.helm.sh/release-namespace: mlflow
      openshift.io/host.generated: "true"
    creationTimestamp: "2025-07-17T18:15:04Z"
    labels:
      app.kubernetes.io/instance: mlflow-server
      app.kubernetes.io/managed-by: Helm
      app.kubernetes.io/name: mlflow-server
      app.kubernetes.io/version: "2.16"
      helm.sh/chart: mlflow-server-0.7.1
    name: mlflow-server
    namespace: mlflow
    resourceVersion: "4751483"
    uid: db8c0886-7da3-4547-8552-af1a7fbb4884
  spec:
    host: mlflow-server-mlflow.apps.cluster-ld95z.ld95z.sandbox671.opentlc.com
    port:
      targetPort: oauth
    tls:
      insecureEdgeTerminationPolicy: Redirect
      termination: reencrypt
    to:
      kind: Service
      name: mlflow-server
      weight: 100
    wildcardPolicy: None
  status:
    ingress:
    - conditions:
      - lastTransitionTime: "2025-07-17T18:15:04Z"
        status: "True"
        type: Admitted
      host: mlflow-server-mlflow.apps.cluster-ld95z.ld95z.sandbox671.opentlc.com
      routerCanonicalHostname: router-default.apps.cluster-ld95z.ld95z.sandbox671.opentlc.com
      routerName: default
      wildcardPolicy: None
kind: List
metadata:
  resourceVersion: ""
